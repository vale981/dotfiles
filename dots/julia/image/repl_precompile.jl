precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Main.var"#1#2", REPL.LineEditREPL})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, REPL.LineEdit.var"#45#76"}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, REPL.LineEdit.var"#74#105"{REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPL.var"#65#74"{REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, REPL.LineEdit.var"#251#255"{REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPL.var"#55#58"{REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.ModalInterface}, REPL.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.swap_watch_package), Base.PkgId})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), Function})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#2#28", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#2#28", Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{OhMyREPL.BracketInserter.var"#7#14"{REPL.LineEdit.MIState, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#26#52", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#26#52", Any, Any, Any})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.SubString{String}, 1}, Char})
precompile(Tuple{typeof(JLLWrappers.withenv_executable_wrapper), JLFzf.var"#1#2"{String, Tuple{String, String, String}}, String, String, String, Bool, Bool})
precompile(Tuple{Type{Base.Dict{String, String}}, Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{typeof(Base.withenv), JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, Tuple{String, String, String}}, String}, Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{typeof(Base.arg_gen), Tuple{String, String, String}})
precompile(Tuple{typeof(Base.setup_stdio), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{Base.var"#589#590"{Base.PipeEndpoint, Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), String, typeof(Base.chomp)})
precompile(Tuple{typeof(JLFzf.insert_history_to_repl), REPL.LineEdit.MIState, Base.SubString{String}})
precompile(Tuple{typeof(REPL.LineEdit.bufend), Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{var"#s828", var"#s827"} where var"#s827"<:Integer where var"#s828"<:Integer})
precompile(Tuple{REPL.LineEdit.var"##push_kill!#18", Any, typeof(REPL.LineEdit.push_kill!), REPL.LineEdit.MIState, String, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#22#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#48", Any, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#112#165", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#112#165", Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.char_move_word_left), Base.GenericIOBuffer{Array{UInt8, 1}}, Any})
precompile(Tuple{typeof(REPL.LineEdit.is_non_word_char), Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#23#49", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#23#49", Any, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#21#47", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#21#47", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{REPL.LineEdit.var"##edit_abort#108", Any, typeof(REPL.LineEdit.edit_abort), Any, Bool})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Nothing, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{REPL.var"#63#72"{Base.IOStream}, Any})
