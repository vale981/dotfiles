#+TITLE: Hiro's Emacs Config
#+PROPERTY: header-args :results silent

* Hiro's Emacs Config
** General Stuff
*** Allow Dangerous Stuff
:PROPERTIES:
:ID:       5e3711ab-6ce4-4297-a757-e67ada5deb32
:END:
Allow downcase.
#+begin_src emacs-lisp :tangle yes
  (put 'downcase-region 'disabled nil)
#+end_src

*** Edit Config
:PROPERTIES:
:ID:       3ec4da82-3022-4d27-b205-f6d3826c735e
:END:
Shortcut to edit this file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun find-config ()
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
  (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC

*** Start Server
:PROPERTIES:
:ID:       2fefb864-628c-4ecc-877e-9b6487074768
:END:
Starts the emacs server.
#+BEGIN_SRC emacs-lisp :tangle yes
  (server-start)
#+END_SRC

*** Desktop
:PROPERTIES:
:ID:       6e7debf5-6388-4d1a-b082-71c9ded7bcfa
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (desktop-save-mode 1)
#+END_SRC

*** Auto-Save
:PROPERTIES:
:ID:       af9dde51-e5b2-476a-9851-76e51c0ec5e6
:END:
Let emacs auto-save in a separate directory. This spares me from
including all that emacs gruft in ~.gitignore~ files.

#+begin_src emacs-lisp :tangle yes
  (setq auto-save-file-name-transforms
    `((".*" "~/.emacs-saves/" t)))
#+end_src

** Hacks
*** Speed up Cursor Movement
:PROPERTIES:
:ID:       359303ad-78af-4d60-8f33-2c7cd7206f08
:END:
Taken from https://github.com/Atman50/emacs-config.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq auto-window-vscroll nil)
#+END_SRC

*** Tune GC
:PROPERTIES:
:ID:       b0006909-45b3-4282-b297-0fe8ac7a4aa3
:END:
#+begin_src emacs-lisp :tangle yes
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold (* 100 1024 1024)))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+end_src
*** Read more data from child processes
:PROPERTIES:
:ID:       2073371e-adda-493d-b8c9-373bcf1302bd
:END:
#+begin_src emacs-lisp :tangle yes
  (setq read-process-output-max (* 1024 1024))
#+end_src
*** Disable Garbage Collection on Fontcache
:PROPERTIES:
:ID:       0eca2431-ad2c-47f2-821c-ab5eafe373ca
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-compacting-font-caches t)
#+END_SRC

** Packages
*** Straight
Straight is loaded in =~/.emacs= before anything else to then load the
latest org mode which loads this file.

*** Packages
:PROPERTIES:
:ID:       95e601a5-0c8a-4dbf-8629-9721765030ae
:END:
Set up package sources.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

*** Bootstrap Use-Package
:PROPERTIES:
:ID:       6b502930-7fac-49ec-9bec-9c94d9071fe6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

Use straight:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq straight-use-package-by-default t)
#+END_SRC

Install diminish:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diminish)
#+END_SRC

** Preferences
*** Boon
:PROPERTIES:
:ID:       0baef9d0-a5a4-48f2-9e88-2ffa87d15957
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region)
  (use-package boon
    :after expand-region
    :load-path "~/.emacs.d/boon/"
    :config
    (use-package expand-region)
    (require 'boon-workman)
    (add-to-list 'boon-special-mode-list 'sly-db-mode)
    (add-to-list 'boon-special-mode-list 'sly-inspector-mode)
    (add-to-list 'boon-special-mode-list 'cider-inspector-mode)
    (add-to-list 'boon-special-mode-list 'cider-macroexpansion-mode)
    (add-to-list 'boon-special-mode-list 'jupyter-repl-mode)
    (add-to-list 'boon-special-mode-list 'term-mode)
    (add-to-list 'boon-special-mode-list 'ansi-term-mode)
    (add-to-list 'boon-special-mode-list 'bufler-list-mode)
    (add-to-list 'boon-special-mode-list 'pdf-outline-buffer-mode)
    (boon-mode))
#+end_src

*** Term
:PROPERTIES:
:ID:       97cb4819-4203-4cbc-a371-e62c69fabd67
:END:
HL line mode is nonsensical in term.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'term-mode-hook
            (lambda ()
              (setq cursor-type 'bar)
              (turn-off-boon-mode)
              (setq global-hl-line-mode nil)))

  (use-package eterm-256color
    :config
    (add-hook 'term-mode-hook #'eterm-256color-mode))
#+end_src

*** VTerm
:PROPERTIES:
:ID:       dedeb938-0a53-463b-b1d3-424e366b7e31
:END:
VTerm has a ~c~ core and is faster + more compatible. We install this through nix.
#+begin_src emacs-lisp :tangle yes
  ;; (use-package vterm
  ;;     :ensure t)
  (add-hook 'vterm-mode-hook
   (lambda ()
     (setq cursor-type 'bar)
     (turn-off-boon-mode)
     (setq global-hl-line-mode nil)))
#+end_src
*** Custom
:PROPERTIES:
:ID:       1ede7fc3-889f-425e-84e4-8a9eabce2866
:END:
Prevent custom from preserving state.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

*** General
:PROPERTIES:
:ID:       12ffac7a-903b-4c84-ba0d-31366d4bdca7
:END:
No startup screen.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-startup-screen t)
#+END_SRC

Hide obstractions.
#+BEGIN_SRC emacs-lisp :tangle yes
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

No cursor blink.
#+BEGIN_SRC emacs-lisp :tangle yes
  (blink-cursor-mode 0)
#+END_SRC

*** Font and Editor
:PROPERTIES:
:ID:       33861a6a-1617-4633-be00-5587dbf8e6ce
:END:
- Set font to ~JetBrains Mono~.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist
               '(font . "JetBrains Mono-12:weight=light:antialias=subpixel"))
  (add-to-list 'default-frame-alist
               '(internal-border-width . 0))
#+END_SRC

**** Highlight current line.
:PROPERTIES:
:ID:       77be21fb-9db5-497e-af66-1b4cc804d026
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-hl-line-mode 1)
#+END_SRC

This allows us to disable it locally

#+begin_src emacs-lisp :tangle yes
  (make-variable-buffer-local 'global-hl-line-mode)
#+end_src

*** Sound
:PROPERTIES:
:ID:       40ee9fc9-39bf-45e3-94a8-9ce8cba65257
:END:
No terminal bell.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Whitespace
:PROPERTIES:
:ID:       4d26afac-fc06-432b-88f0-c56beca9208b
:END:
Ethan wspace mode resolves the nightmare of mixed whitespace.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ethan-wspace
    :config (global-ethan-wspace-mode 1)
    (setq mode-require-final-newline nil))
#+END_SRC

**** Tabs
:PROPERTIES:
:ID:       ffbdaa5a-26ba-47e3-8661-b77e1fe1dfe6
:END:
Don't use 'em.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Pairs
:PROPERTIES:
:ID:       8e6afa0c-941d-4ec8-a1c4-1d40c79959bc
:END:
Enable electric pairs.
#+BEGIN_SRC emacs-lisp :tangle yes
  (electric-pair-mode 1)
#+END_SRC

Show parens.
#+begin_src emacs-lisp :tangle yes
  (require 'paren)
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+end_src

*** Theme
:PROPERTIES:
:ID:       ea6f41b1-8067-452f-9b99-40bb573500f6
:END:
We use the doom theme.
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons)
  (use-package doom-themes
    :after all-the-icons
    :config
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-light t)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src

*** Compilation
:PROPERTIES:
:ID:       00d0bc01-ca6b-4f53-9aef-12f92d6224bb
:END:
Reuse the compilation frame instead of annoyingly creating new ones.
#+begin_src emacs-lisp :tangle yes
  (add-to-list
   'display-buffer-alist
   '("\\*compilation\\*" display-buffer-reuse-window
                           (reusable-frames . t)))
#+end_src

And scroll the compilation output.
#+begin_src emacs-lisp :tangle yes
  (setq compilation-scroll-output t)
#+end_src

** Interface
*** General Tweaks
:PROPERTIES:
:ID:       53254477-f03e-44b4-bb80-6e6bf9fd28c5
:END:
Short =yes-no=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Multiple Cursors
:PROPERTIES:
:ID:       14313a37-a3d7-41b9-a2b6-b79c8459c22a
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("M-<mouse-1>" . mc/add-cursor-on-click)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           :prefix "C-c m"
           :prefix-map my/mc-map
           ("c" . mc/edit-lines)
           ("<" . mc/mark-all-like-this)))
  :config (put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Previous/Next Buffer
:PROPERTIES:
:ID:       033b54d9-e5a3-420c-af9e-26be143c20e7
:END:
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-p") 'previous-buffer)
  (global-set-key (kbd "M-n") 'next-buffer)
#+end_src

*** Misc
:PROPERTIES:
:ID:       5a653d75-bc36-479d-8f4f-1bf83d5f0af2
:END:
Centralize the backup location.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t      ; Don't delink hardlinks
        version-control t        ; Use version numbers on backups
        delete-old-versions t    ; Automatically delete excess backups
        kept-new-versions 20 ; how many of the newest versions to keep
        kept-old-versions 5  ; and how many of the old
        )
#+END_SRC

*** Bufler
:PROPERTIES:
:ID:       39150942-cac9-4474-a68d-9860fc80bbf0
:END:
Nice buffer management and switching.
#+begin_src emacs-lisp :tangle yes
  (use-package bufler
    :init (require 'map)
    :bind (("C-x C-b" . bufler)
           ("C-x b" . bufler-switch-buffer)))
#+end_src
*** Navigation
**** Avy
:PROPERTIES:
:ID:       45e310ac-0893-46f7-ad4e-fd10e4223d5d
:END:
Jump to char.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy
    :bind (("M-g w" . avy-goto-word-1)
           ("M-g f" . avy-goto-line)
           ("C-'" . avy-goto-char)
           ("C-;" . avy-goto-char-2)))
#+END_SRC

*** Move Lines
:PROPERTIES:
:ID:       ada00b7c-b930-4a89-89d7-054e142ee913
:END:
Move whole lines easily.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :diminish
    :config (move-text-default-bindings))
#+END_SRC

*** Treemacs
:PROPERTIES:
:ID:       cfb56f78-fbaa-46ae-b291-b4363695dfbe
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :bind ("<f5>" . projectile-compile-project)
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC

*** Rainbow Delimiters, Identifiers
:PROPERTIES:
:ID:       dc0ff24a-4d59-42b4-b99b-95b65274ceb0
:END:
Color code matching delimiters.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-identifiers
    :hook (julia-mode . rainbow-identifiers-mode))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Ligatures
:PROPERTIES:
:ID:       6d6b7fe3-bdcd-4392-bca4-915a433e4e3c
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ligature
    :straight (:host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't
                            '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
                              "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
                              "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
                              "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
                              "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
                              "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
                              "<:" ":<" ":>" ">:" "<>" ";;" "/==" ".=" ".-" "__"
                              "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
                              ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
                              "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
                              "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
                              "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
                              "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
                              "&=" "+="))
    (global-ligature-mode t))
#+end_src
*** Ripgrep
:PROPERTIES:
:ID:       961b4dd1-6784-4cf5-a347-8d603c1ba3b5
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package rg
    :config
    (rg-enable-default-bindings)
    :bind ("C-x p" . rg-menu))
#+end_src

*** Flyspell
:PROPERTIES:
:ID:       eac8b2db-730c-48c0-9765-857e2afcbdbb
:END:
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct-ivy
    :bind ("C-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

*** Abbrev
:PROPERTIES:
:ID:       28c3f70a-568c-4ccb-9314-0056fc0c59bd
:END:
Use abbrev for greek input.
#+begin_src emacs-lisp :tangle yes
  (define-abbrev-table 'global-abbrev-table
    '(
          ;; Greek small letters
          ("8al" "α")
          ("8be" "β")
          ("8ga" "γ")
          ("8de" "δ")
          ("8ep" "ε")
          ("8ze" "ζ")
          ("8et" "η")
          ("8th" "θ")
          ("8io" "ι")
          ("8ka" "κ")
          ("8la" "λ")
          ("8mu" "μ")
          ("8nu" "ν")
          ("8xi" "ξ")
          ("8oi" "ο") ;; omicron
          ("8pi" "π")
          ("8ro" "ρ")
          ("8si" "σ")
          ("8ta" "τ")
          ("8up" "υ")
          ("8ph" "φ")
          ("8ch" "χ")
          ("8ps" "ψ")
          ("8oe" "ω") ;; omega

          ;; Greek capital letters
          ("8Al" "Α")
          ("8Be" "Β")
          ("8Ga" "Γ")
          ("8De" "Δ")
          ("8Ep" "Ε")
          ("8Ze" "Ζ")
          ("8Et" "Η")
          ("8Th" "Θ")
          ("8Io" "Ι")
          ("8Ka" "Κ")
          ("8La" "Λ")
          ("8Mu" "Μ")
          ("8Nu" "Ν")
          ("8Xi" "Ξ")
          ("8Oi" "Ο") ;; Omicron
          ("8Pi" "Π")
          ("8Ro" "Ρ")
          ("8Si" "Σ")
          ("8Ta" "Τ")
          ("8Up" "Υ")
          ("8Ph" "Φ")
          ("8Ch" "Χ")
          ("8Ps" "Ψ")
          ("8Oe" "Ω") ;; Omega
  ))

  (setq save-abbrevs nil)
  (setq-default abbrev-mode t)
#+end_src

*** Hydra
:PROPERTIES:
:ID:       b4a81a76-c3ec-44eb-8beb-664fcb218311
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package hydra)
#+end_src
*** Direnv Support
:PROPERTIES:
:ID:       de7c7800-9d2a-49bf-a004-159d688fd715
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package direnv
   :config
   (direnv-mode))
#+end_src
*** Writeroom
:PROPERTIES:
:ID:       7ef0eb70-75c3-4f69-b50d-637fc34051bb
:END:
Distraction free writing.

#+begin_src emacs-lisp :tangle yes
  (use-package writeroom-mode)
#+end_src
*** Aggressive Indent
:PROPERTIES:
:ID:       7e964146-a4d6-4d50-9865-df03314329d4
:END:
Indenting wherever we can!
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :config (global-aggressive-indent-mode 1))
#+end_src
*** Ace Window
:PROPERTIES:
:ID:       73c8bf4d-9124-404a-82fb-15db7bd11396
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
*** PDF Tools
#+begin_src emacs-lisp :tangle yes
  (require 'pdf-tools)
  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook
            'pdf-view-auto-slice-minor-mode)
#+end_src
** Programming / Language Support
*** LSP
:PROPERTIES:
:ID:       114a9729-b4a7-4cb8-81cf-89f0eeafb316
:END:
Support for the =Language Server Protocol=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-ui)
  (use-package lsp-treemacs)
  (use-package lsp-mode
    :after (lsp-ui elixir-mode)
    :config
    (setq lsp-prefer-flymake nil)
    (setq
     lsp-headerline-breadcrumb-enable nil
     lsp-idle-delay 0.1
     lsp-ui-doc-enable nil
     lsp-ui-doc-use-childframe t
     lsp-ui-doc-position 'top
     lsp-ui-doc-include-signature t
     lsp-ui-sideline-enable t
     lsp-ui-flycheck-enable t
     lsp-ui-flycheck-list-position 'right
     lsp-ui-flycheck-live-reporting t
     lsp-ui-peek-enable t
     lsp-ui-peek-list-width 60
     lsp-ui-peek-peek-height 25
     lsp-enable-semantic-highlighting t
     lsp-enable-symbol-highlighting nil
     lsp-modeline-code-actions-segments '(count icon)
     lsp-clients-clangd-args '("--background-index" "-j=2" "--clang-tidy" "--cross-file-rename" "--log=verbose"))
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)

    :hook ((elixir-mode . lsp)
           (lsp-mode . lsp-ui-mode)))

  (use-package dap-mode
    :config
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra)))
    (setq dap-auto-configure-features
          '(sessions locals controls tooltip))
    :hook ((c-mode c++-mode) .
           (lambda ()
             (let ((cpptools (getenv "CPPTOOLS")))
               (setq dap-cpptools-debug-path
                     (concat cpptools "/share/vscode/extensions/ms-vscode.cpptools/"))
               (setq dap-cpptools-debug-program
                     (list
                      (concat cpptools
                              "/share/vscode/extensions/ms-vscode.cpptools/debugAdapters/OpenDebugAD7")))
               (require 'dap-cpptools)))))



#+END_SRC

*** Separedit
:PROPERTIES:
:ID:       a914f70d-d05e-427a-aa5c-2cb24cee0858
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package separedit
    :config
    (setq separedit-default-mode 'markdown-mode)
    (add-to-list 'separedit-string-quotes-alist
                 '(julia-mode     . ("\"\"\"" "\"")))
    :bind
    (:map prog-mode-map
          ("C-c '" . separedit)))

#+end_src
*** Company
:PROPERTIES:
:ID:       f5437fe9-bac3-4b7f-aa73-28f468a18a7d
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :diminish
    :bind (:map company-active-map
                ("C-n" . company-select-next-or-abort)
                ("C-p" . company-select-previous-or-abort)
                ("<return>" . company-complete-selection))
    :config
    (setq company-show-numbers t)
    (setq company-idle-delay 1)
    (setq company-minimum-prefix-length 3)
    (add-to-list 'company-backends 'company-capf)
    (global-set-key (kbd "C-<tab>") 'company-complete-common)

    (setq company-frontends
          '(company-pseudo-tooltip-frontend
            company-echo-metadata-frontend))
    :hook (after-init . global-company-mode))
#+END_SRC

Set up the company backends: (maybe do it the other way around...)
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package company-tern
  ;;   :config (add-to-list 'company-backends 'company-tern))
  ;; (use-package company-anaconda
  ;;   :config )

#+END_SRC

*** Hotfuzz
:PROPERTIES:
:ID:       b56c98c9-0d00-44a9-9050-7e819c0001b4
:END:
For fuzzy completion matching.

#+begin_src emacs-lisp :tangle yes
  (use-package hotfuzz
    :config (setq completion-styles '(hotfuzz)))
#+end_src

*** Lisp
**** Roswell
:PROPERTIES:
:ID:       0ec09485-7f6f-4557-8c79-ac732c6b27cc
:END:
Support for the roswell package manager.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;(load (expand-file-name "~/.roswell/helper.el"))
#+END_SRC

**** Lispy Mode
:PROPERTIES:
:ID:       ab3ddba8-e875-47cf-b63c-427fbe504d36
:END:
A lisp code navigation extension that exploits the syntax of lisp to
avoid modifiers.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lispy
    :diminish
    :bind (("M-(" . lispy-parens-auto-wrap))
    :config
    (setq lispy-use-sly t)
    (setq lispy-compat '(cider))
    (let ((custom-bindings '(("u" . lispy-up)
                             ("p" . lispy-down)
                             ("n" . lispy-left)
                             ("o" . lispy-right)
                             ("e" . lispy-flow)
                             ("i" . lispy-different)
                             ("j" . lispy-eval-other-window)
                             ("h" . lispy-eval)
                             ("l" . lispy-other-mode)
                             ("f" . lispy-new-copy)
                             ("F" . lispy-narrow)
                             ("d" . lispy-undo)
                             ("k" . lispy-tab))))
      (dolist (binding custom-bindings)
        (lispy-define-key lispy-mode-map (car binding) (cdr binding))))
    :hook ((emacs-lisp-mode . lispy-mode)
           (eval-expression-minibuffer-setup . lispy-mode)
           (ielm-mode . lispy-mode)
           (lisp-mode . lispy-mode)
           (common-lisp-mode . lispy-mode)
           (lisp-interaction-mode . lispy-mode)
           (scheme-mode . lispy-mode)
           (racket-mode . lispy-mode)
           (clojure-mode . lispy-mode)))
#+END_SRC

**** Cider
:PROPERTIES:
:ID:       5a524ad4-fa26-4f29-b32c-1d1376c4e4bd
:END:
Clojure IDE.
#+begin_src emacs-lisp :tangle yes
  (use-package cider
    :config
    (setq cider-font-lock-dynamically '(macro core function var))

    :hook ((cider-repl-mode . cider-company-enable-fuzzy-completion)
           (cider-mode . cider-company-enable-fuzzy-completion)))
#+end_src

***** clj-refactor
:PROPERTIES:
:ID:       e2f52a4a-a2c6-4b1b-961b-d550ae39b1c9
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package clj-refactor
    :config (cljr-add-keybindings-with-prefix "C-c C-m")
    (setq cljr-warn-on-eval nil)
    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1)      ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))
    :hook (cider-mode . my-clojure-mode-hook))
#+end_src
**** Sly
:PROPERTIES:
:ID:       879ca264-d5e4-495a-a0fd-362f9c5056ad
:END:
Slime fork with new features.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sly
    :config (setenv "APP_ENV" "development"))
  (use-package sly-repl-ansi-color
    :after sly)
  (use-package sly-quicklisp
    :after sly)
  (use-package sly-macrostep
    :after sly)
#+END_SRC

*** Racket
:PROPERTIES:
:ID:       1a617fa1-9cf6-4ba4-960a-7b01d5fc3c53
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package geiser)

  (use-package racket-mode
    :config (defun my-racket-mode-hook ()
              (setq-local eldoc-documentation-function #'racket-eldoc-function))
    :hook (racket-mode . my-racket-mode-hook))
#+end_src

*** Poly Mode
:PROPERTIES:
:ID:       921ceae1-2e82-4083-8da0-cb910cfd8363
:END:
Multiple major modes in one buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package polymode
  ;;   :config
  ;;   (use-package poly-markdown)
  ;;   ;; (use-package poly-org)
  ;;   (use-package poly-rst))
#+END_SRC

*** Org Mode
**** General Tweaks
:PROPERTIES:
:ID:       0684cabd-733b-40e5-86cb-47de1c562e7e
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-clock-persist 'history)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (org-clock-persistence-insinuate)
  (setq org-id-link-to-org-use-id 'create-if-interactive)
#+END_SRC

**** Refile
:PROPERTIES:
:ID:       25e8eb21-b15c-4cd1-9cde-4b458a885b71
:END:
- Targets include this file and any file contributing to the agenda - up to 9 levels deep
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets
        (quote
         ((nil :maxlevel . 9)
          (org-agenda-files :maxlevel . 9))))
#+END_SRC

- Use full outline paths for refile targets - we file directly with IDO
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-use-outline-path t)
#+END_SRC

- Targets complete directly with IDO
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

- Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

- Use the current window for indirect buffer display
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-indirect-buffer-display 'current-window)
#+END_SRC

- Exclude DONE state tasks from refile targets
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2
                    (org-heading-components))
               org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

**** Agenda
:PROPERTIES:
:ID:       0c5b4ae0-6278-4f9f-b71c-8cd6ddc6842e
:END:
- Formatting: Add path to Items
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          (timeline . "  % s")
          (todo .
                " %i %-12:c [%b] ")
          (tags .
                " %i %-12:c [%b] ")
          (search . " %i %-12:c")))
#+END_SRC

- Custom Agenda Commands
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(("X" agenda
           ""
           nil
           ("~/Documents/org/out/agenda.html"))
          ("n" "Notes"
           tags
           "NOTE"
           ((org-agenda-overriding-header "Notes")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/notes.html"))
          ("s" "Next"
           todo
           "NEXT"
           ((org-agenda-overriding-header "Next")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/next.html"))
          ("f" "Questions"
           tags
           "QUESTION"
           ((org-agenda-overriding-header "Questions")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/question.html"))
          ("l" "Einkaufsliste"
           todo
           "OUTOFSTOCK"
           ((org-agenda-overriding-header "Einkaufsliste")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/einkaufsliste.html"))))
#+END_SRC

**** Super Agenda
:PROPERTIES:
:ID:       6ab271bc-30b2-444c-9678-8f6e6416f010
:END:
Buff the agenda to use Groups.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-super-agenda
    :config
    (setq org-super-agenda-groups
          '((:name "NEXT"
                   :order 1
                   :todo "NEXT")
            (:name "WAITING"
                   :order 2
                   :todo "WAITING")
            (:name "TODO"
                   :order 3
                   :auto-outline-path t
                   :todo "TODO")))
    (org-super-agenda-mode 1))
#+END_SRC

**** Keybindings
:PROPERTIES:
:ID:       b736811c-d62e-4cc1-bdce-9fa7eeca04fa
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (define-key org-mode-map (kbd "C-S-<return>") 'org-insert-todo-heading)
#+END_SRC

**** Bullets
:PROPERTIES:
:ID:       3dfd3886-edd6-4c15-9c9d-3f0dea822d26
:END:
For headings.
#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :custom
    (org-bullets-bullet-list '("◉" "○" "✸" "✿"  "✜" "◆"))
    (org-ellipsis "↬")
    :hook (org-mode . org-bullets-mode))
#+end_src

And for normal lists.
#+begin_src emacs-lisp :tangle yes
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
#+end_src

**** Numbers in Heading
:PROPERTIES:
:ID:       25dbd121-47df-4035-8978-598034404cce
:END:
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-num-mode)
#+end_src

**** Directories
:PROPERTIES:
:ID:       47490474-e7cb-4b82-83f6-d794771c985e
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "~/Documents/org")
  (setq org-default-notes-file "~/Documents/org/refile.org")
#+END_SRC

Agenda Files:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
   org-agenda-files
   (list "~/Documents/org/todo.org"
         "~/Documents/Projects/UNI/master/masterarb/project.org"))
#+END_SRC

**** Automatically mark task as done if all subtasks are done
:PROPERTIES:
:ID:       a7c4a187-a647-43fd-b96c-5fe2ca469f74
:END:
#+begin_src emacs-lisp :tangle yes
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src
**** Custom States
:PROPERTIES:
:ID:       9a13b076-b2cb-4617-85a0-8f37a18c15eb
:END:
- states
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO" "WAITING" "NEXT" "HOLD" "|"
                  "DONE")
        (sequence "BESORGEN" "WARTEN" "|" "BESORGT")
        (sequence "OUTOFSTOCK" "|" "INSTOCK")
        (sequence "RESOLVE" "ASK" "RESEARCH" "|" "RESOLVED")
        (sequence "HOMEWORK" "ACTIVE" "|" "FINISHED")))
#+END_SRC

- triggers
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-state-tags-triggers
        (quote
         (("CANCELLED"
           ("CANCELLED" . t))
          ("WAITING"
           ("WAITING" . t))
          ("HOLD"
           ("WAITING")
           ("HOLD" . t))
          (done ("WAITING")
                ("HOLD"))
          ("TODO"
           ("WAITING")
           ("CANCELLED")
           ("HOLD"))
          ("NEXT"
           ("WAITING")
           ("CANCELLED")
           ("HOLD"))
          ("DONE"
           ("WAITING")
           ("CANCELLED")
           ("HOLD")))))
#+END_SRC
**** Capture Templates
:PROPERTIES:
:ID:       534bc598-1e8f-4f63-91b9-2653d30cd173
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        (quote
         (("t" "Todo"
           entry
           (file org-default-notes-file)
           "* TODO %?\n%U\n%a\n")
          ("n" "Note"
           entry
           (file org-default-notes-file)
           "* %? :NOTE:\n%U\n%a\n")
          ("q" "Question"
           entry
           (file "~/Documents/org/refile/questions.org")
           "* RESOLVE %? :QUESTION:\n%U\n%a\n")
          ("e" "Exercise"
           entry
           (file "~/Documents/org/refile/exercises.org")
           "* HOMEWORK %? :EXERCISE:\n%a\n")
          ("j" "Journal"
           entry
           (file+datetree "~/Documents/org/diary.org")
           "**** %?\n%U\n")
          ("m" "Meeting"
           entry
           (file+headline "~/Documents/org/general.org" "Meetings")
           "** %? :MEETING:\n")
          ("p" "Appointment"
           entry
           (file+headline "~/Documents/org/general.org" "Appointments")
           "** %? :APPOINTMENT:\n"))))
#+END_SRC

For =ox-hugo=.
#+begin_src emacs-lisp :tangle yes
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")                ;Place the cursor here finally
                 "\n")))

    (add-to-list 'org-capture-templates
                 '("h"                ;`org-capture' binding + h
                   "Hugo post"
                   entry
                   ;; It is assumed that below file is present in `org-directory'
                   ;; and that it has a "Blog Ideas" heading. It can even be a
                   ;; symlink pointing to the actual location of all-posts.org!
                   (file+olp "content.org" "Blog""Uncategorized")
                   (function org-hugo-new-subtree-post-capture-template)))
#+end_src

**** Babel
:PROPERTIES:
:ID:       f14de4ec-7360-497f-be62-7a53c4922a73
:END:
#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (sqlite . t)))

  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

  ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (setq org-startup-with-inline-images t)
  (setq imagemagick-types-inhibit t)
  (define-key org-mode-map (kbd "M-j")
    #'(lambda ()
       (interactive)
       (org-babel-execute-src-block)
       (org-babel-next-src-block)))

#+end_src


Htmlize for nice org html export.
#+begin_src emacs-lisp :tangle yes
  (use-package htmlize)
#+end_src

And dont evaluate code again.
#+begin_src emacs-lisp :tangle yes
  (setq org-export-use-babel nil)
#+end_src

Automatically tangle on save.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'org-babel-tangle nil 'make-it-local)))
#+end_src
**** Evince for PDF, Xournal for xoj
:PROPERTIES:
:ID:       d9b3dab5-4e9f-4ab2-a40f-40f1268a1670
:END:

I have disabled evince for now.
#+begin_src emacs-lisp :tangle yes
  (eval-after-load "org"
    '(setq org-file-apps
           '((auto-mode . emacs)
             ("\\.x?html?\\'" . "firefox %s")
             ;; ("\\.pdf\\(::[0-9]+\\)?\\'" . whatacold/org-pdf-app)
             ("\\.gif\\'" . "eog \"%s\"")
             ("\\.mp4\\'" . "vlc \"%s\"")
             ("\\.mkv" . "vlc \"%s\"")
             ("\\.xoj" . "xournal \"%s\"")
             ("\\.svg" . "firefox \"%s\"")
             ("\\.webm" . "vlc \"%s\""))))

  ;; (defun whatacold/org-pdf-app (file-path link-without-schema)
  ;;   "Open pdf file using pdf-tools and go to the specified page."
  ;;   (let* ((page (if (not (string-match "\\.pdf::\\([0-9]+\\)\\'"
  ;;                                     link-without-schema))
  ;;                    1
  ;;                  (string-to-number (match-string 1 link-without-schema)))))
  ;;     (require 'subr-x)
  ;;     (start-process "evince" "evince" "evince" (concat "--page-label=" (number-to-string page)) file-path)))
#+end_src

#+RESULTS:
: whatacold/org-pdf-app

**** Presentations
:PROPERTIES:
:ID:       1d6c1a53-fb56-4cb1-8c09-868c0126b6c9
:END:
Org tree slide is a presentation tool for org mode.
#+begin_src emacs-lisp :tangle yes
  (use-package org-tree-slide
    :bind (("<f10>" . 'org-tree-slide-move-next-tree)
           ("<f9>" . 'org-tree-slide-move-previous-tree)))
#+end_src
**** LaTeX preview size
:PROPERTIES:
:ID:       b6beac7c-6b2e-433f-80a8-2c77f4df6aef
:END:
#+begin_src emacs-lisp :tangle yes
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
**** Instant latex preview
:PROPERTIES:
:ID:       efa1372a-d79f-4eb2-bee8-572fa1aa2669
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package org-fragtog
  ;;   :hook org-mode)
#+end_src
**** Archive all DONE
:PROPERTIES:
:ID:       30bddaf0-e2c0-4d52-85d1-984d8509f8f4
:END:
#+begin_src emacs-lisp :tangle yes
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))
#+end_src
**** Screenshots
:PROPERTIES:
:ID:       850d926a-992b-4f09-9fce-1cd38cfdba0f
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package org-download)
  (use-package org-attach-screenshot
    :bind ("<f6> s" . org-attach-screenshot)
    :config
    (setq org-attach-screenshot-dirfunction
          (lambda ()
            (progn (cl-assert (buffer-file-name))
                   (concat (file-name-sans-extension (buffer-file-name))
                           "-att")))
          org-attach-screenshot-command-line "gnome-screenshot -a -f %f")

    (setq org-attach-screenshot-command-line "xfce4-screenshooter -r -s %f"))
#+end_src
**** Hugo
:PROPERTIES:
:ID:       af2d7bd1-c43d-4bdc-9bdc-eae7ba922f6a
:END:
Ox-hugo allows to export org mode to hugo for my [[https://protagon.space][website]].
#+begin_src emacs-lisp :tangle yes
  (use-package ox-hugo
    :after ox)
#+end_src
**** Org Ref
:PROPERTIES:
:ID:       7f5826e2-ac3d-4f59-a8f0-1e8810d6d177
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package org-ref
    :config
    (setq org-ref-bibliography-notes "~/bibliography/notes.org"
          org-ref-default-bibliography '("~/bibliography/references.bib")
          org-ref-pdf-directory "~/bibliography/bibtex-pdfs/")
    (require 'org-ref-ivy))
#+end_src

We add scihub as a pdf source.
#+begin_src emacs-lisp :tangle yes
  (defun sci-hub-pdf-url (doi)
    "Get url to the pdf from SCI-HUB"
    (setq *doi-utils-pdf-url* (concat "https://sci-hub.se/" doi) ;captcha
          ,*doi-utils-waiting* t
          )
    ;; try to find PDF url (if it exists)
    (url-retrieve (concat "https://sci-hub.se/" doi)
                  (lambda (status)
                    (goto-char (point-min))
                    (while (search-forward-regexp "\\(https://\\|//sci-hub.se/downloads\\).+download=true'" nil t)
                      (let ((foundurl (match-string 0)))
                        (message foundurl)
                        (if (string-match "https:" foundurl)
                            (setq *doi-utils-pdf-url* foundurl)
                          (setq *doi-utils-pdf-url* (concat "https:" foundurl))))
                      (setq *doi-utils-waiting* nil))))
    (while *doi-utils-waiting* (sleep-for 0.1))
    ,*doi-utils-pdf-url*)

  (defun doi-utils-get-bibtex-entry-pdf (&optional arg)
    "Download pdf for entry at point if the pdf does not already exist locally.
  The entry must have a doi. The pdf will be saved to
  `org-ref-pdf-directory', by the name %s.pdf where %s is the
  bibtex label.  Files will not be overwritten.  The pdf will be
  checked to make sure it is a pdf, and not some html failure
  page. You must have permission to access the pdf. We open the pdf
  at the end if `doi-utils-open-pdf-after-download' is non-nil.

  With one prefix ARG, directly get the pdf from a file (through
  `read-file-name') instead of looking up a DOI. With a double
  prefix ARG, directly get the pdf from an open buffer (through
  `read-buffer-to-switch') instead. These two alternative methods
  work even if the entry has no DOI, and the pdf file is not
  checked."
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let ( ;; get doi, removing http://dx.doi.org/ if it is there.
            (doi (replace-regexp-in-string
                  "https?://\\(dx.\\)?.doi.org/" ""
                  (bibtex-autokey-get-field "doi")))
            (key (cdr (assoc "=key=" (bibtex-parse-entry))))
            (pdf-url)
            (pdf-file))
        (setq pdf-file (concat
                        (if org-ref-pdf-directory
                            (file-name-as-directory org-ref-pdf-directory)
                          (read-directory-name "PDF directory: " "."))
                        key ".pdf"))
        ;; now get file if needed.
        (unless (file-exists-p pdf-file)
          (cond
           ((and (not arg)
                 doi
                 (if (doi-utils-get-pdf-url doi)
                     (setq pdf-url (sci-hub-pdf-url doi))
                   (setq pdf-url "https://www.sciencedirect.com/science/article/")))
            (url-copy-file pdf-url pdf-file)
            ;; now check if we got a pdf
            (if (org-ref-pdf-p pdf-file)
                (message "%s saved" pdf-file)
              (delete-file pdf-file)
              ;; sci-hub fallback option
              (setq pdf-url (sci-hub-pdf-url doi))
              (url-copy-file pdf-url pdf-file)
              ;; now check if we got a pdf
              (if (org-ref-pdf-p pdf-file)
                  (message "%s saved" pdf-file)
                (delete-file pdf-file)
                (message "No pdf was downloaded.") ; SH captcha
                (browse-url pdf-url))))
           ;; End of sci-hub fallback option
           ((equal arg '(4))
            (copy-file (expand-file-name (read-file-name "Pdf file: " nil nil t))
                       pdf-file))
           ((equal arg '(16))
            (with-current-buffer (read-buffer-to-switch "Pdf buffer: ")
              (write-file pdf-file)))
           (t
            (message "We don't have a recipe for this journal.")))
          (when (and doi-utils-open-pdf-after-download (file-exists-p pdf-file))
            (org-open-file pdf-file))))))
#+end_src

Download the paper from arxiv.
#+begin_src emacs-lisp :tangle yes
  (defun arxiv-utils-get-bibtex-entry-pdf (&optional arg)
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((arxiv (bibtex-autokey-get-field "eprint"))
             (key (cdr (assoc "=key=" (bibtex-parse-entry))))
             (pdf-url (concat "https://arxiv.org/pdf/" arxiv ".pdf"))
             (pdf-file (concat
                        (if org-ref-pdf-directory
                            (file-name-as-directory org-ref-pdf-directory)
                          (read-directory-name "PDF directory: " "."))
                        key ".pdf")))
        ;; now get file if needed.
        (if (string-empty-p arxiv)
            (message "%s" (propertize "No arxiv entry!"
                                      'face '(:foreground "red")))
          (when (or (not (file-exists-p pdf-file))
                    (yes-or-no-p "File exists. Overwrite?"))
            (if (file-exists-p pdf-file)
                (delete-file pdf-file))
            (url-copy-file pdf-url pdf-file)
            ;; now check if we got a pdf
            (if (org-ref-pdf-p pdf-file)
                (message "%s saved" pdf-file)
              (delete-file pdf-file)))))))
#+end_src

**** Org Roam
:PROPERTIES:
:ID:       0f207452-8517-4c0b-bde8-80f80a88763c
:END:
See https://www.orgroam.com/manual.html.
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :config
    (setq org-roam-directory "~/Documents/org/roam"
          org-roam-completion-everywhere t)
    (org-roam-db-autosync-mode)
    (setq orb-preformat-keywords '("citekey" "file"))
    (setq org-roam-capture-templates
          '(("d" "default" plain "%?"
             :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n")
             :unnarrowed t)
            ("r" "bibliography reference" plain
             (file "~/.emacs.d/roam-literature-template.org")
             :if-new
             (file+head "references/${citekey}.org" "#+title: ${title}\n")
             :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)))
#+end_src

***** Bibtex
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam-bibtex
    :after (org-roam)
    :config
    (require 'org-ref)
    (require 'orb-ivy)
    (setq orb-note-actions-interface 'hydra)
    (setq orb-process-file-keyword t)
    (setq orb-file-field-extensions '("pdf" "epub" "html"))
    (org-roam-bibtex-mode)
    :bind (("C-c n r" . orb-insert-link)
           ("C-c n a" . orb-note-actions)))
#+end_src

****  Org Noter
#+begin_src emacs-lisp :tangle yes
  (use-package org-noter
    :config
    (setq
     ;; The WM can handle splits
     org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil))
#+end_src

**** TODO Mathpix
:PROPERTIES:
:ID:       4d864096-b257-450c-b11c-ccd49dea6b8b
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package mathpix.el
  ;;   :straight (:host github :repo "jethrokuan/mathpix.el")
  ;;   :custom ((mathpix-app-id "app-id")
  ;;            (mathpix-app-key "app-key"))
  ;;   :bind
  ;;   ("C-x m" . mathpix-screenshot))
#+end_src
*** Git
**** Magit
:PROPERTIES:
:ID:       01ea61d7-eb1f-4f6b-b4f5-d4ea2bffeab4
:END:
- Just load magit and give it a key.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :init (require 'project)
    :bind ("C-x g" . magit-status))
#+END_SRC

- Reload files on git change.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit-filenotify)
#+END_SRC
**** Time-Machine
:PROPERTIES:
:ID:       96d780be-db71-4e19-b0f4-f41fe103ea71
:END:
View the history of a file.

#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine)
#+end_src
**** Gutter
:PROPERTIES:
:ID:       ebe9a7aa-3f9a-4ec9-b651-3018472e1f46
:END:
Mark changed lines on the fringes.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter-fringe+
    ;:diminish
    :config
    (global-git-gutter+-mode 1)
    (git-gutter-fr+-minimal)
    (git-gutter+-turn-on))
#+END_SRC
*** Sage Math
:PROPERTIES:
:ID:       dd2ade9d-25e7-4575-a3b9-76f5e7c580e2
:END:
CAS for some annoying calculations.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sage-shell-mode
    :hook (sage-shell-after-prompt . sage-shell-view-mode))
#+END_SRC

*** Ivy
:PROPERTIES:
:ID:       8c91633b-52ea-4957-9720-2164b79d424a
:END:
Make mini-buffers and search nicer.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           ("C-x r" . counsel-recentf)
           :map boon-command-map
           ("w" . swiper))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (with-eval-after-load 'recentf
      (setq ivy-use-virtual-buffers nil)))
#+END_SRC

*** LaTeX
:PROPERTIES:
:ID:       141f5f31-5bfd-4356-a205-27e25306a5cd
:END:
Enable electric braces for math mode: ~\( \)~
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq LaTeX-electric-left-right-brace t)
  (defun my-auctex-init ()
     (auto-fill-mode)
     (latex-math-mode)
     (turn-on-reftex)
     (flyspell-mode 1))
  (add-hook 'LaTeX-mode-hook 'my-auctex-init)
#+END_SRC

Configure AucTeX.
#+begin_src emacs-lisp :tangle yes
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+end_src

Custom math macros.
#+begin_src emacs-lisp :tangle yes
  ;(add-to-list 'LaTeX-math-list (list ?\; "dagger" "dagger" 8224))
#+end_src

**** RefTeX
:PROPERTIES:
:ID:       90b8584a-92fe-4032-b74a-a6c2610728fb
:END:
#+begin_src emacs-lisp :tangle yes
  (setq reftex-plug-into-auctex t)
  (setq reftex-ref-macro-prompt nil)
  (setq reftex-label-alist '(AMSTeX))
  (defun reftex-format-cref (label def-fmt ref-style)
    (format "\\cref{%s}" label))
  (setq reftex-format-ref-function 'reftex-format-cref)
#+end_src

**** Latexmk
:PROPERTIES:
:ID:       c7a8c0e0-b050-471a-8804-c7a20715bd25
:END:
Set up latexmk for easier making.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup))
#+END_SRC

**** TODO Use Tectonic
*** Javascript
**** JS2
:PROPERTIES:
:ID:       67935874-5a0d-4871-9cff-0207ec3ede99
:END:
Nicer JS mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :hook (js2-mode . js2-imenu-extras-mode))
#+END_SRC

Refactoring and some simple goodies, like killing a semantic entity
rather than a line.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-refactor
    :config (js2r-add-keybindings-with-prefix "C-c C-r")
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill))
    :hook (js2-mode . js2-refactor-mode))
#+END_SRC

**** RJSX
:PROPERTIES:
:ID:       cd707071-336a-4fe2-a2c3-92e0cad25c20
:END:
A js2 mode for a =jsx=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rjsx-mode)
#+END_SRC

**** JS-Doc
:PROPERTIES:
:ID:       0f490c55-f6b2-4ecf-ab44-533d68b1cc3c
:END:
Documentation comment helper.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js-doc
    :bind (:map js2-mode-map
                ("C-c i" . js-doc-insert-function-doc)
                ("@" . js-doc-insert-tag))
    :config
    (setq js-doc-mail-address "hiro@protagon.space"
          js-doc-author (format "Valentin Boettcher <%s>" js-doc-mail-address)
          js-doc-url "protagon.space"
          js-doc-license "MIT"))
#+END_SRC

**** JSON
:PROPERTIES:
:ID:       74517987-a646-4c18-a53a-14f42a732192
:END:
Json mode package.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode)
#+END_SRC

**** TODO Tern
:PROPERTIES:
:ID:       48b6fe23-a48d-43d1-a0de-0fa1e8d6b9f3
:END:
JS Ide feautures. May be replaced by LSP.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'load-path "~/src/tern")
  (autoload 'tern-mode "tern.el" nil t)
  (add-hook 'js2-mode-hook #'tern-mode)
#+END_SRC

*** Elixir
Some junk for the elixir programming language.

**** Base Mode
:PROPERTIES:
:ID:       2062b283-a743-48fd-9247-f361d61bd3ff
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elixir-mode
    :config
    ;; (mapc (lambda (pair) (push pair prettify-symbols-alist))
    ;;       '(;; Syntax
    ;;         ("do" .      #x2770)
    ;;         ("|>" .      #x2A20)
    ;;         ("->" .      #x21A6)
    ;;         ("fn" .      #x03BB)
    ;;         ("quote" .      #x2358)
    ;;         ("unquote" .      #x236A)
    ;;         ("end" .      #x2771)))
    )
#+END_SRC

*** Projectile
:PROPERTIES:
:ID:       da08907a-c833-4fe8-a9d7-c2263aed0049
:END:

The caching makes it /way/ faster.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it))
    (setq projectile-enable-caching t)
    :after ivy)

  (use-package counsel-projectile
    :after (ivy projectile)
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (counsel-projectile-mode))
#+END_SRC

*** Web Mode
:PROPERTIES:
:ID:       1d3441ed-8802-4ec1-a6a4-6645e1f727a7
:END:
A very neat mode for editing html and the like.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC

*** Emmet
:PROPERTIES:
:ID:       9b25f942-73fa-494a-8c59-93c8444dd9f0
:END:
Nice html and css snippets.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :hook ((sgml-mode . emmet-mode)
           (rjsx-mode . emmet-mode)
           (css-mode . emmet-mode)))
#+END_SRC

*** Flycheck
:PROPERTIES:
:ID:       e859a2c3-2de4-4912-bfb8-4b4d3b29ab6f
:END:
Syntax checking and linting.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :config
    (setq flycheck-check-syntax-automatically '(save mode-enable idle-change))
    (setq flycheck-idle-change-delay 2)
    :hook ((after-init . global-flycheck-mode)))
  (use-package avy-flycheck)
#+END_SRC

*** Python
**** Elpy
:PROPERTIES:
:ID:       c236c336-289a-4133-8bf3-ecb5a66534f5
:END:
#+begin_src emacs-lisp :tangle yes
  ;; Installed through nix
  ;; (use-package elpy
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;   (add-hook 'elpy-mode-hook (lambda ()
  ;;                               (add-hook 'before-save-hook
  ;;                                         'elpy-black-fix-code nil t)))
  ;;   (when (load "flycheck" t t)
  ;;     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  ;;     (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;;   (add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;                "jupyter"))
  (elpy-enable)
  (add-hook 'elpy-mode-hook (lambda ()
                              (add-hook 'before-save-hook
                                        'elpy-black-fix-code nil t)))
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))

    (add-to-list 'python-shell-completion-native-disabled-interpreters
                 "jupyter")
#+end_src

**** Anaconda
:PROPERTIES:
:ID:       31703afa-434c-4b64-a65b-cd21c992fdd0
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package anaconda-mode
  ;;   :after (sphinx-doc python-docstring)
  ;;   :hook ((python-mode . anaconda-mode)
  ;;          (python-mode . anaconda-eldoc-mode)
  ;;          (python-mode .
  ;;                            (lambda ()
  ;;                              (sphinx-doc-mode t)
  ;;                              (whitespace-mode 1)
  ;;                              (python-docstring-mode 1)))))
  ;; (use-package company-anaconda)
#+END_SRC

**** Mark overlong Lines
:PROPERTIES:
:ID:       ecbcdb07-0489-412e-b426-ace03776e455
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq whitespace-line-collumn 79)
  (setq whitespace-style '(face empty tabs lines-tail trailing))
#+END_SRC

**** Docstrings
:PROPERTIES:
:ID:       012deb47-1587-473a-b74c-85a0a322d7ad
:END:
Support for sphinx style docstrings.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python-docstring)
  (use-package sphinx-doc)
#+END_SRC

*** Jupyter
:PROPERTIES:
:ID:       db24f115-910d-4f9f-ba13-4dd9855c0b7d
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package jupyter
    :config
    (require 'jupyter-python)
    (require 'jupyter-julia)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (jupyter . t)))
    (setq jupyter-eval-short-result-display-function 'popup-tip))

#+end_src

*** YASnippets
:PROPERTIES:
:ID:       7dc43d7d-d857-4947-9f82-56d956bea24b
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-global-mode
    :config (yas-global-mode 1))
  (use-package elixir-yasnippets)
  (use-package yasnippet-snippets)
  (use-package yasnippet-classic-snippets)
  (use-package ivy-yasnippet)
  (use-package ivy-xref
    :init (setq xref-show-definitions-function #'ivy-xref-show-defs))
#+END_SRC

*** Fish
:PROPERTIES:
:ID:       8f702ee5-59b7-4056-b76e-f9cd13414657
:END:
Fish shell script mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fish-mode)
#+END_SRC
*** Arch PKGBUILD
:PROPERTIES:
:ID:       76851fc8-b7eb-458a-8d42-c60c31c429bc
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pkgbuild-mode)
#+END_SRC
*** C++
:PROPERTIES:
:ID:       5eb6b743-18bd-4c18-ba40-a5372793e570
:END:
Set up ~lsp~, ~ccls~.
#+begin_src emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))
  ;; (use-package ccls
  ;;   :ensure t
  ;;   :config
  ;;   (setq ccls-executable "ccls")
  ;;   (setq lsp-prefer-flymake nil)
  ;;   (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  ;;   (setq ccls-sem-highlight-method 'overlay)
  ;;   ;; (ccls-use-default-rainbow-sem-highlight)
  ;;   (set-buffer-multibyte nil)            ;TODO: Better fix!
  ;;   :hook ((c-mode c++-mode objc-mode) .
  ;;          (lambda () (require 'ccls) (lsp))))
#+end_src

Automatically insert Include-Guards.
#+begin_src emacs-lisp :tangle yes
  ;; autoinsert C/C++ header
    (define-auto-insert
      (cons "\\.\\([Hh]\\|hh\\|hpp\\)\\'" "My C / C++ header")
      '(nil
        (let* ((noext (substring buffer-file-name 0 (match-beginning 0)))
                   (nopath (file-name-nondirectory noext))
                   (ident (concat (upcase nopath) "_H")))
          (concat "#ifndef " ident "\n"
                          "#define " ident  " 1\n\n\n"
                          "\n\n#endif // " ident "\n"))
        (make-string 70 ?/) "\n"
        "// $Log:$\n"
        "//\n"))

    ;; auto insert C/C++
    (define-auto-insert
      (cons "\\.\\([Cc]\\|cc\\|cpp\\)\\'" "My C++ implementation")
      '(nil
        (let* ((noext (substring buffer-file-name 0 (match-beginning 0)))
                   (nopath (file-name-nondirectory noext))
                   (ident (concat nopath ".h")))
          (if (file-exists-p ident)
                  (concat "#include \"" ident "\"\n")))
        (make-string 70 ?/) "\n"
        "// $Log:$\n"
        "//\n"))
#+end_src

Clang Format.
#+begin_src emacs-lisp :tangle yes
  (use-package clang-format+
    :hook (c-mode-common . clang-format+-mode))
#+end_src

Cmake support.
#+begin_src emacs-lisp :tangle yes
  (use-package cmake-mode)
#+end_src

Use 4 spaces for indenting.
#+begin_src emacs-lisp :tangle yes
  (setq-default c-basic-offset 4)
#+end_src

**** RealGUD
:PROPERTIES:
:ID:       483441e4-c3aa-421a-b3c7-509188fc99b6
:END:
Debugging yay!
#+begin_src emacs-lisp :tangle yes
  (use-package realgud
    :config (setq realgud-safe-mode nil))
#+end_src
*** YAML
:PROPERTIES:
:ID:       6386c709-34bd-42ce-97a3-985bfae11ceb
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
*** Docker
:PROPERTIES:
:ID:       08c8c436-b465-4659-86a8-d23a8b22ddfe
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode)
#+end_src
*** Regex
:PROPERTIES:
:ID:       23d2c04f-d35c-444e-888c-4bb68328bdcc
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package regex-tool)
#+end_src
*** Meson
:PROPERTIES:
:ID:       b62041da-b43c-4f2a-b5c1-7848205c4897
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package meson-mode)
#+end_src
*** Lua
:PROPERTIES:
:ID:       1e6a36c0-cfdb-4fe9-9c1a-52ecea13b06e
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode)
#+end_src
*** Nix
:PROPERTIES:
:ID:       465f550d-9380-4ce2-a3ba-98c2529acb5b
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package nix-mode)
#+end_src
*** Julia
:PROPERTIES:
:ID:       c06a05a4-ce4f-400a-a6a3-7bffbbcfa792
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package julia-repl
    :config
    (julia-repl-set-terminal-backend 'vterm)
    (add-hook 'julia-mode-hook 'julia-repl-mode)
    (setq julia-repl-switches "-J /home/hiro/.julia/image/sys_repl.so"))
  (use-package eglot-jl
    :ensure t
    :defer  t
    :config
    (setq eglot-jl-julia-flags  '("-J" "/home/hiro/.julia/image/sys_ls.so")))
  (use-package project
    :demand t
    :config
    (defun project-root (project)
      (car (project-roots project))))
  (use-package eglot)
  (use-package julia-mode
    :ensure t
    :interpreter ("julia" . julia-mode)
    :config
    (add-hook 'julia-mode-hook 'eglot-jl-init)
    (add-hook 'julia-mode-hook 'eglot-ensure))
#+end_src

**** Highlighting
:PROPERTIES:
:ID:       3bd869ed-0168-4722-a3b4-49745567dd40
:END:
Some extra highlighting for assignments is nice.
Stolen from [[https://www.reddit.com/r/emacs/comments/cbvwlp/juliamode_syntax_highlight/][reddit]] or python-mode by proxy.
#+begin_src emacs-lisp :tangle yes
  (setq my-julia-assign-ops
        `(or "=" "+=" "-=" "*=" "/=" "//=" "%=" "**="
             ">>=" "<<=" "&=" "^=" "|="))
  (font-lock-add-keywords
   'julia-mode
   `((,(lambda (limit)
         (let (res
               (re (rx-to-string `(: (group (+ (any word ?. ?_)))
                                     (? ?\[ (+ (not (any  ?\]))) ?\])
                                     (* space)
                                     ,my-julia-assign-ops))))
           (while (and (setq res (re-search-forward re limit t))
                       (or (nth 1 (syntax-ppss))
                           (equal (char-after (point)) ?=))))
           res))
      (1 font-lock-variable-name-face nil nil))
     (,(lambda (limit)
         (let (res
               (re (rx-to-string `(: (group (+ (any word ?. ?_)))
                                     (* space)
                                     (* ?,
                                        (* space)
                                        (+ (any word ?. ?_))
                                        (* space))
                                     ?,
                                     (* space)
                                     (+ (any word ?. ?_))
                                     (* space)
                                     ,my-julia-assign-ops))))
           (while (and (setq res (re-search-forward re limit t))
                       (goto-char (match-end 1))
                       (nth 1 (syntax-ppss))))
           res))
      (1 font-lock-variable-name-face nil nil))))
#+end_src

#+RESULTS:

**** Formatting
:PROPERTIES:
:ID:       83deb4c2-9191-45c8-afd7-d59feb3c8dae
:END:
Hooking into aggressive indent.
#+begin_src emacs-lisp :tangle yes
  (use-package julia-formatter
    :straight (julia-formatter
               :type git
               :repo "https://codeberg.org/FelipeLema/julia-formatter.el.git"
               :pre-build ("julia" "--project=." "-e " "\"using Pkg; Pkg.resolve();\"")
               :files ("*.el" "*.toml" "*.jl"))
    :hook
    (julia-mode . (lambda ()
                    (add-hook 'before-save-hook
                              (lambda ()
                                (julia-formatter-format-region
                                 (point-min)
                                 (point-max)))
                              nil
                              t))))
#+end_src
*** Rust
:PROPERTIES:
:ID:       784b23ee-9e23-4562-b485-27851f865a3d
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package rust-mode
    :hook (rust-mode . lsp))

  ;; Add keybindings for interacting with Cargo
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src
*** QML
:PROPERTIES:
:ID:       b49db1fb-a87e-4bca-ac22-fde79fd4d80a
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package qml-mode)
#+end_src
*** Arduino
:PROPERTIES:
:ID:       ae05b648-a396-4d16-8fbf-3f2609ceb763
:END:
#+begin_src emacs-lisp :tangle yes
    (use-package arduino-mode)
#+end_src
** Applications
*** Ank
:PROPERTIES:
:ID:       f8d492d4-6bbc-4f0c-888e-0b12837a661f
:END:
Stolen from https://yiufung.net/post/anki-org/.
#+begin_src emacs-lisp :tangle yes
  (use-package anki-editor
    :after org
    :bind (:map org-mode-map
                ("<f12>" . anki-editor-cloze-region-auto-incr)
                ("<f11>" . anki-editor-cloze-region-dont-incr)
                ("<f10>" . anki-editor-reset-cloze-number)
                ("<f9>"  . anki-editor-push-tree))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config
    (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
          anki-editor-org-tags-as-anki-tags t)

    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes)
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number))
#+end_src
*** MU4E
:PROPERTIES:
:ID:       19002b1b-7dab-4239-ba33-83ab204df86d
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package mu4e
  ;;   :config
  ;;   (setq mu4e-view-show-images t)
  ;;   (when (fboundp 'imagemagick-register-types)
  ;;     (imagemagick-register-types))
  ;;   (setq mu4e-compose-in-new-frame t)
  ;;   (setq mu4e-sent-messages-behavior 'delete)
  ;;   (add-hook 'mu4e-headers-mode-hook
  ;;             (defun my/mu4e-change-headers ()
  ;;               (interactive)
  ;;               (setq mu4e-headers-fields
  ;;                     `((:human-date . 25) ;; alternatively, use :date
  ;;                       (:flags . 6)
  ;;                       (:from . 22)
  ;;                       (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
  ;;                       (:size . 7)))))
  ;;   (add-hook 'mu4e-compose-mode-hook
  ;;             (defun my-do-compose-stuff ()
  ;;               "My settings for message composition."
  ;;               (visual-line-mode)
  ;;               (org-mu4e-compose-org-mode)
  ;;               (use-hard-newlines -1)
  ;;               (flyspell-mode)))

  ;;   (setq mu4e-contexts
  ;;         `(
  ;;           ,(make-mu4e-context
  ;;             :name "Protagon"
  ;;             :match-func (lambda (msg) (when msg
  ;;                                         (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
  ;;             :vars '(
  ;;                     (mu4e-trash-folder . "/Gmail/[Gmail].Trash")
  ;;                     (mu4e-refile-folder . "/Gmail/[Gmail].Archive")
  ;;                     )))))
#+end_src
*** Helm Bibtex
#+begin_src emacs-lisp :tangle yes
    (use-package ivy-bibtex
      :config
      (setq bibtex-completion-bibliography
            (list org-ref-default-bibliography)
            bibtex-completion-library-path (list org-ref-pdf-directory))
      (setq bibtex-dialect 'biblatex))
#+end_src
** Custom Scripts
*** Close all Buffers
:PROPERTIES:
:ID:       84c7e39f-d35d-49d8-bb66-acb8df2fdeb6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun close-all-buffers ()
    "Closes all buffers."
    (interactive)
    (mapc 'kill-buffer
          (buffer-list)))
#+END_SRC
*** Rename Buffer and File
:PROPERTIES:
:ID:       53dd7d81-f90e-4088-9326-0d5d8ebb69c6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
#+END_SRC

*** Create Common Use-Package declaration
:PROPERTIES:
:ID:       58d9179a-8ef6-4713-a216-2d8549795bad
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defmacro my-create-up-common (name &rest common-args)
    "Creates a use-package declaration that automatically adds
    predefined configuration."
    (declare (indent 1))
    `(defmacro ,name (package &rest args)
       (declare (indent 1))
       `(use-package ,package
          ,@args
          ,@',common-args)))
#+END_SRC
*** Insert a new exercise into an org file
:PROPERTIES:
:ID:       6ac3df76-84eb-4f86-a010-59a3001db150
:END:
#+begin_src emacs-lisp :tangle yes
  (require 'org)
  (require 'org-element)
  (require 'cl-lib)
  (defun insert-uebung (file org-path)
    (interactive
     (list (read-file-name "Select Uebung: " "~/Downloads") (org-get-outline-path t)))
    (when (and
           (eq (length org-path) 2)
           (string= (nth 1 org-path) "Uebungen"))
      (save-match-data
        (let* ((subject (cl-first (org-get-outline-path)))
               (last-heading
                (cl-first (last (org-map-entries
                              (lambda ()
                                (nth 4 (org-heading-components)))
                              nil 'tree))))
               (last-ex-number
                (progn
                  (string-match ".*?\\([0-9]+\\)\\..*" last-heading)
                  (string-to-number (match-string 1 last-heading))))
               (ueb-dir (format "%s%s/uebungen/%d/"
                                (file-name-directory (buffer-file-name))
                                subject
                                (1+ last-ex-number)))
               (new-file (format "%s%s" ueb-dir (file-name-nondirectory file)))
               (solution-file (format "%s/lsg.xoj" ueb-dir))
               (template-file (format "%s/lsg.xoj"
                                      (file-name-directory (buffer-file-name))))
               (template-bg-file (format "%s/lsg.xoj.bg_2.png"
                                         (file-name-directory (buffer-file-name)))))
          (make-directory ueb-dir t)
          (copy-file file new-file t)
          (org-insert-heading-after-current)
          (insert (format "TODO %d. Uebung" (1+ last-ex-number)))
          (org-demote)
          (forward-line)
          (insert (format "- [[%s][Blatt]]\n" new-file))
          (copy-file template-file solution-file nil)
          (copy-file template-bg-file ueb-dir nil)
          (insert (format "- [[%s][meine loesung]]\n\n" solution-file))
          (forward-line -4)
          (org-set-tags "EXERCISE")
          (call-interactively 'org-deadline)))))

#+end_src

#+RESULTS:
: insert-uebung
*** Fun Hack to make C++ look like python
:PROPERTIES:
:ID:       6cba49bd-d365-46e9-8d53-62fe91ece43b
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ov)
  (defun pycpp-sugar ()
    (interactive)
    (ov-clear 'category 'pycpp)
    (ov-set (ov-regexp "[[:blank:]]*\n?[[:blank:]]*{[[:blank:]]*\n") 'display ":\n" 'category 'pycpp
            'modification-hooks '(my-ov-evaporate-matching) 'evaporate 't
            'insert-in-front-hooks '(my-ov-evaporate-matching-end)
            'insert-behind-hooks '(my-ov-evaporate-matching-end))
    (ov-set (ov-regexp "^[[:blank:]]*}[[:blank:];]*\n") 'display "\n" 'category 'pycpp 'evaporate 't
            'modification-hooks '(my-ov-evaporate-matching-end)
            'insert-in-front-hooks '(my-ov-evaporate-matching-end)
            'insert-behind-hooks '(my-ov-evaporate-matching-end)))

  (defun pycpp-unsugar ()
    (interactive)
    (ov-clear 'category 'pycpp))

  (defun my-ov-evaporate-matching (_ov _after _beg _end &optional _length)
    (save-excursion
      (goto-char (ov-beg _ov))
      (re-search-forward "{")
      (backward-char)
      (forward-sexp)
      (backward-char)
      (ov-clear 'category 'pycpp (point) (+ (point) 1))
      (goto-char _beg)
      (insert (buffer-substring _beg _end))
      (ov-clear (ov-beg _ov) (ov-end _ov))))

  (defun my-ov-evaporate-matching-end (_ov _after _beg _end &optional _length)
    (save-excursion
      (goto-char (ov-end _ov))
      (re-search-backward "}")
      (forward-char)
      (backward-sexp)
      (ov-clear 'category 'pycpp (point) (+ (point) 1))
      (goto-char _beg)
      (insert (buffer-substring _beg _end))
      (ov-clear (ov-beg _ov) (ov-end _ov))))

  (defun pycpp--newline ()
    (interactive)
    (newline)
    (pycpp-sugar))

  (define-minor-mode pycpp-mode
    "Toggles the pycpp mode."
    nil                                ; Initial value, nil for disabled
    :global nil
    :group 'cpp
    :lighter " pycpp"
    :keymap
    (list (cons (kbd "RET") #'pycpp--newline))

    (if pycpp-mode
        (progn
          (message "pycpp mode enabled")
          (pycpp-sugar))
      (pycpp-unsugar)))
#+end_src
