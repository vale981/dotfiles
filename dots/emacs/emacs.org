#+TITLE: Hiro's Emacs Config

* Hiro's Emacs Config
** General Stuff
*** Allow Dangerous Stuff
Allow downcase.
#+begin_src emacs-lisp :tangle yes
  (put 'downcase-region 'disabled nil)
#+end_src

*** Edit Config
Shortcut to edit this file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun find-config ()
    "Edit config.org"
    (interpactive)
    (find-file "~/.emacs/emacs.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC

*** Start Server
Starts the emacs server.
#+BEGIN_SRC emacs-lisp :tangle yes
  (server-start)
#+END_SRC

*** Desktop
#+BEGIN_SRC emacs-lisp :tangle yes
  (desktop-save-mode 1)
#+END_SRC

*** Auto-Save
Let emacs auto-save in a separate directory. This spares me from
including all that emacs gruft in ~.gitignore~ files.

#+begin_src emacs-lisp :tangle yes
  (setq auto-save-file-name-transforms
    `((".*" "~/.emacs-saves/" t)))
#+end_src
** Hacks
*** Speed up Cursor Movement
Taken from https://github.com/Atman50/emacs-config.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq auto-window-vscroll nil)
#+END_SRC

*** Tune GC
#+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold 20000000)
#+end_src

*** Disable Garbage Collection on Fontcache
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-compacting-font-caches t)
#+END_SRC

** Packages
*** Packages
Set up package sources.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

*** Bootstrap Use-Package
#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

Allways ensure:
#+BEGIN_SRC emacs-lisp :tangle yes
  (customize-set-variable 'use-package-always-ensure t)
#+END_SRC

Install diminish:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diminish)
#+END_SRC

** Preferences
*** Boon
#+begin_src emacs-lisp :tangle yes
    (use-package expand-region)
    (use-package boon
      :after expand-region
      :load-path "~/.emacs.d/boon/"
      :config
      (use-package expand-region)
      (require 'boon-workman)
      (add-to-list 'boon-special-mode-list 'sly-db-mode)
      (add-to-list 'boon-special-mode-list 'sly-inspector-mode)
      (boon-mode))
#+end_src
*** Custom
Prevent custom from preserving state.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

*** General
 No startup screen.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (setq inhibit-startup-screen t)
 #+END_SRC

 Hide obstractions.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (scroll-bar-mode -1)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
 #+END_SRC

 No cursor blink.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (blink-cursor-mode 0)
 #+END_SRC

*** Font and Editor
- Set font to ~JetBrains Mono~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (set-frame-font "JetBrains Mono 11" nil t)
  (set-face-attribute 'default t :font "JetBrains Mono 11")
#+END_SRC

 - Highlight current line.
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-hl-line-mode 1)
#+END_SRC

*** Sound
No terminal bell.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Whitespace
Ethan wspace mode resolves the nightmare of mixed whitespace.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ethan-wspace
    :config (global-ethan-wspace-mode 1)
    (setq mode-require-final-newline nil))
#+END_SRC

**** Tabs
Don't use 'em.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Pairs
Enable electric pairs.
#+BEGIN_SRC emacs-lisp :tangle yes
  (electric-pair-mode 1)
#+END_SRC

Use smartparens.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :diminish
    :config
    (smartparens-global-mode)
    (show-smartparens-global-mode +1))
#+END_SRC

*** Theme
We use the doom theme.
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons)
  (use-package doom-themes
    :after all-the-icons
    :config
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-light t)
    (doom-themes-treemacs-config)
    (doom-themes-org-config)
    )

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src

** Interface
*** General Tweaks
Short =yes-no=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Multiple Cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("M-<mouse-1>" . mc/add-cursor-on-click)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           :prefix "C-c m"
           :prefix-map my/mc-map
           ("c" . mc/edit-lines)
           ("<" . mc/mark-all-like-this)))
  :config (put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Misc
Centralize the backup location.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t      ; Don't delink hardlinks
        version-control t        ; Use version numbers on backups
        delete-old-versions t    ; Automatically delete excess backups
        kept-new-versions 20 ; how many of the newest versions to keep
        kept-old-versions 5  ; and how many of the old
        )
#+END_SRC

*** Ibuffer
Nicer buffer menu. Set up some custom filters.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Org" ;; all org-related buffers
                  (mode . org-mode))
                 ("Programming" ;; prog stuff not already in MyProjectX
                  (or
                   (mode . c-mode)
                   (mode . c++-mode)
                   (mode . perl-mode)
                   (mode . python-mode)
                   (mode . lisp-mode)
                   (mode . emacs-lisp-mode)))
                 ("Matrix"
                  (mode . matrix-client-mode))
                 ("LaTeX"
                  (mode . latex-mode))
                 ("Docker"
                  (mode . dockerfile-mode))
                 ("Configs"
                  (mode . yaml-mode))
                 ("Directories"
                  (mode . dired-mode))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  (global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
#+END_SRC

*** Pretty Symbols
Some basic set-up for ~pretty-mode~ and ~prettify-symbols-mode~. The
details are handled on a per-mode base.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pretty-mode
    :config
    (global-pretty-mode t)
    (pretty-activate-groups
     '(:greek :arithmetic-nary :arrows :arithmetic)))
  (global-prettify-symbols-mode 1)
#+END_SRC

Unprettify on hover.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq prettify-symbols-unprettify-at-point t)
#+END_SRC

*** Navigation
**** Avy
Jump to char.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy
    :bind (("M-g w" . avy-goto-word-1)
           ("M-g f" . avy-goto-line)
           ("C-'" . avy-goto-char)
           ("C-;" . avy-goto-char-2)))
#+END_SRC
*** Move Lines
Move whole lines easily.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :diminish
    :config (move-text-default-bindings))
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC

*** Rainbow Delimiters, Identifiers
Color code matching delimiters.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package rainbow-identifiers
  ;;   :hook prog-mode)

;;(use-package rainbow-delimiters
;;:hook prog-mode)
#+END_SRC

*** Smart Tab
#+begin_src emacs-lisp :tangle yes
  (use-package smart-tab
    :config (global-smart-tab-mode))
#+end_src
*** Ripgrep
#+begin_src emacs-lisp :tangle yes
  (use-package rg
    :config
    (rg-enable-default-bindings)
    :bind ("C-x p" . rg-menu))
#+end_src
*** Color Identifiers
Give variables their own color.
#+begin_src emacs-lisp :tangle yes
  ;; (use-package color-identifiers-mode
  ;;   :hook (after-init . global-color-identifiers-mode))
#+end_src
*** Flyspell
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct-ivy
    :bind ("C-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

*** Abbrev
Use abbrev for greek input.
#+begin_src emacs-lisp :tangle yes
  (define-abbrev-table 'global-abbrev-table
    '(
          ;; Greek small letters
          ("8al" "α")
          ("8be" "β")
          ("8ga" "γ")
          ("8de" "δ")
          ("8ep" "ε")
          ("8ze" "ζ")
          ("8et" "η")
          ("8th" "θ")
          ("8io" "ι")
          ("8ka" "κ")
          ("8la" "λ")
          ("8mu" "μ")
          ("8nu" "ν")
          ("8xi" "ξ")
          ("8oi" "ο") ;; omicron
          ("8pi" "π")
          ("8ro" "ρ")
          ("8si" "σ")
          ("8ta" "τ")
          ("8up" "υ")
          ("8ph" "φ")
          ("8ch" "χ")
          ("8ps" "ψ")
          ("8oe" "ω") ;; omega

          ;; Greek capital letters
          ("8Al" "Α")
          ("8Be" "Β")
          ("8Ga" "Γ")
          ("8De" "Δ")
          ("8Ep" "Ε")
          ("8Ze" "Ζ")
          ("8Et" "Η")
          ("8Th" "Θ")
          ("8Io" "Ι")
          ("8Ka" "Κ")
          ("8La" "Λ")
          ("8Mu" "Μ")
          ("8Nu" "Ν")
          ("8Xi" "Ξ")
          ("8Oi" "Ο") ;; Omicron
          ("8Pi" "Π")
          ("8Ro" "Ρ")
          ("8Si" "Σ")
          ("8Ta" "Τ")
          ("8Up" "Υ")
          ("8Ph" "Φ")
          ("8Ch" "Χ")
          ("8Ps" "Ψ")
          ("8Oe" "Ω") ;; Omega
  ))

  (setq save-abbrevs nil)
  (setq-default abbrev-mode t)
#+end_src

*** Outline Magic
#+begin_src emacs-lisp :tangle yes
  (use-package outline-magic
    :config
    (eval-after-load 'outline
      '(progn
         (require 'outline-magic)
         (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle))))
#+end_src

** Programming / Language Support
*** LSP
Support for the =Language Server Protocol=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-ui)
  (use-package lsp-treemacs)
  (use-package lsp-mode
    :after (lsp-ui elixir-mode)
    :config
    (setq lsp-prefer-flymake nil)
    (setq lsp-ui-doc-enable nil
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable t
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'right
          lsp-ui-flycheck-live-reporting t
          lsp-ui-peek-enable t
          lsp-ui-peek-list-width 60
          lsp-ui-peek-peek-height 25
          lsp-enable-semantic-highlighting t
          lsp-enable-symbol-highlighting nil)
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    (setq lsp-clients-elixir-server-executable "/home/hiro/src/elixir-ls/release/language_server.sh")
    :hook ((elixir-mode . lsp)
           (lsp-mode . lsp-ui-mode)))
  (use-package dap-mode
    :config
    (require 'dap-gdb-lldb)
    (dap-gdb-lldb-setup)
    :hook ((c-mode c++-mode) .
           (lambda ()
             (require 'dap-lldb))))
#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :diminish
    :bind (("<C-tab>" . company-complete)
           :map company-active-map
           ("C-n" . company-select-next-or-abort)
           ("C-p" . company-select-previous-or-abort))
    :config
    (setq company-show-numbers t)
    (setq company-idle-delay 0)
    (setq company-lsp-cache-candidates 'auto)
    (setq company-lsp-async t)
    (setq company-lsp-enable-snippet t)
    (setq company-lsp-enable-recompletion t)
    (company-tng-configure-default)
    (setq company-frontends
          '(company-tng-frontend
            company-pseudo-tooltip-frontend
            company-echo-metadata-frontend))

    :hook (after-init . global-company-mode))
  (use-package company-flx
    :after company
    :config (company-flx-mode +1))
#+END_SRC

Set up the company backends: (maybe do it the other way around...)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-tern
    :config (add-to-list 'company-backends 'company-tern))
  ;; (use-package company-anaconda
  ;;   :config (add-to-list 'company-backends 'company-anaconda))
  (use-package company-lsp
    :config (add-to-list 'company-backends 'company-lsp))
#+END_SRC

*** Lisp
**** Roswell
Support for the roswell package manager.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (load (expand-file-name "~/.roswell/helper.el"))
#+END_SRC

**** Lispy Mode
A lisp code navigation extension that exploits the syntax of lisp to
avoid modifiers.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lispy
    :diminish
    :bind (("M-(" . lispy-parens-auto-wrap))
    :config (setq lispy-use-sly t)
    (let ((custom-bindings '(("u" . lispy-up)
                            ("p" . lispy-down)
                            ("n" . lispy-left)
                            ("o" . lispy-right)
                            ("e" . lispy-flow)
                            ("i" . lispy-different)
                            ("j" . lispy-eval-other-window)
                            ("h" . lispy-eval)
                            ("l" . lispy-other-mode)
                            ("f" . lispy-new-copy)
                            ("F" . lispy-narrow)
                            ("d" . lispy-undo)
                            ("k" . lispy-tab))))
      (dolist (binding custom-bindings)
        (lispy-define-key lispy-mode-map (car binding) (cdr binding))))
    :hook ((emacs-lisp-mode . lispy-mode)
           (eval-expression-minibuffer-setup . lispy-mode)
           (ielm-mode . lispy-mode)
           (lisp-mode . lispy-mode)
           (common-lisp-mode . lispy-mode)
           (lisp-interaction-mode . lispy-mode)
           (scheme-mode . lispy-mode)
           (racket-mode . lispy-mode)))
#+END_SRC

**** Sly
Slime fork with new features.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sly
    :config (setenv "APP_ENV" "development"))
  (use-package sly-repl-ansi-color
    :after sly)
  (use-package sly-quicklisp
    :after sly)
  (use-package sly-macrostep
    :after sly)
#+END_SRC

*** Racket
#+begin_src emacs-lisp :tangle yes
  ;; (use-package geiser)

  (use-package racket-mode
    :config (defun my-racket-mode-hook ()
              (setq-local eldoc-documentation-function #'racket-eldoc-function))
    :hook (racket-mode . my-racket-mode-hook))
#+end_src

*** Poly Mode
Multiple major modes in one buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package polymode
  ;;   :config
  ;;   (use-package poly-markdown)
  ;;   ;; (use-package poly-org)
  ;;   (use-package poly-rst))
#+END_SRC

*** Org Mode
**** General Tweaks
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC
**** Refile
 - Targets include this file and any file contributing to the agenda - up to 9 levels deep
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets
        (quote
         ((nil :maxlevel . 9)
          (org-agenda-files :maxlevel . 9))))
#+END_SRC

 - Use full outline paths for refile targets - we file directly with IDO
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-use-outline-path t)
#+END_SRC

 - Targets complete directly with IDO
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

 - Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

 - Use the current window for indirect buffer display
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-indirect-buffer-display 'current-window)
#+END_SRC

 - Exclude DONE state tasks from refile targets
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2
                    (org-heading-components))
               org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

**** Agenda
 - Formatting: Add path to Items
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          (timeline . "  % s")
          (todo .
                " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
          (tags .
                " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
          (search . " %i %-12:c")))
#+END_SRC

 - Custom Agenda Commands
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(("X" agenda
           ""
           nil
           ("~/Documents/org/out/agenda.html"))
          ("n" "Notes"
           tags
           "NOTE"
           ((org-agenda-overriding-header "Notes")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/notes.html"))
          ("s" "Next"
           todo
           "NEXT"
           ((org-agenda-overriding-header "Next")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/next.html"))
          ("f" "Questions"
           tags
           "QUESTION"
           ((org-agenda-overriding-header "Questions")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/question.html"))
          ("l" "Einkaufsliste"
           todo
           "OUTOFSTOCK"
           ((org-agenda-overriding-header "Einkaufsliste")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/einkaufsliste.html"))))
#+END_SRC

**** Super Agenda
Buff the agenda to use Groups.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-super-agenda
    :defer t
    :config
    (setq org-super-agenda-groups
          '((:name "NEXT"
                   :order 1
                   :todo "NEXT")
            (:name "WAITING"
                   :order 2
                   :todo "WAITING")
            (:name "TODO"
                   :order 3
                   :todo "TODO")))
    (org-super-agenda-mode 1))
#+END_SRC

**** Keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c c") 'org-capture)
  (define-key org-mode-map (kbd "C-S-<return>") 'org-insert-todo-heading)
#+END_SRC

**** Directories
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "~/Documents/org")
  (setq org-default-notes-file "~/Documents/org/refile.org")
#+END_SRC

Agenda Files:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (list "~/Documents/org/todo.org" "~/Documents/org/calendar.org"))
#+END_SRC

**** Automatically mark task as done if all subtasks are done
#+begin_src emacs-lisp :tangle yes
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src
**** Custom States
 - states
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO" "WAITING" "NEXT" "HOLD" "|"
                  "DONE")
        (sequence "BESORGEN" "WARTEN" "|" "BESORGT")
        (sequence "OUTOFSTOCK" "|" "INSTOCK")
        (sequence "RESOLVE" "ASK" "RESEARCH" "|" "RESOLVED")
        (sequence "HOMEWORK" "ACTIVE" "|" "FINISHED")))
#+END_SRC

 - triggers
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-state-tags-triggers
        (quote
         (("CANCELLED"
           ("CANCELLED" . t))
          ("WAITING"
           ("WAITING" . t))
          ("HOLD"
           ("WAITING")
           ("HOLD" . t))
          (done ("WAITING")
                ("HOLD"))
          ("TODO"
           ("WAITING")
           ("CANCELLED")
           ("HOLD"))
          ("NEXT"
           ("WAITING")
           ("CANCELLED")
           ("HOLD"))
          ("DONE"
           ("WAITING")
           ("CANCELLED")
           ("HOLD")))))
#+END_SRC
**** Capture Templates
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        (quote
         (("t" "Todo"
           entry
           (file org-default-notes-file)
           "* TODO %?\n%U\n%a\n")
          ("n" "Note"
           entry
           (file org-default-notes-file)
           "* %? :NOTE:\n%U\n%a\n")
          ("q" "Question"
           entry
           (file "~/Documents/org/refile/questions.org")
           "* RESOLVE %? :QUESTION:\n%U\n%a\n")
          ("e" "Exercise"
           entry
           (file "~/Documents/org/refile/exercises.org")
           "* HOMEWORK %? :EXERCISE:\n%a\n")
          ("j" "Journal"
           entry
           (file+datetree "~/Documents/org/diary.org")
           "**** %?\n%U\n")
          ("m" "Meeting"
           entry
           (file org-default-notes-file)
           "** %? :MEETING:\n"))))
#+END_SRC
**** Babel
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-babel-load-languages '(ein . t))

  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

  ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (setq org-startup-with-inline-images t)
  (setq imagemagick-types-inhibit t)
  (setq ein:output-area-inlined-images t)
#+end_src

Htmlize for nice org html export.
#+begin_src emacs-lisp :tangle yes
  (use-package htmlize)
#+end_src

And dont evaluate code again.
#+begin_src emacs-lisp :tangle yes
  (setq org-export-use-babel nil)
#+end_src

And a hack to make ob-ipython open the source in a python buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package jupyter
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((jupyter . t))))
#+end_src

Automatically tangle on save.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'org-babel-tangle nil 'make-it-local)))
#+end_src
**** Evince for PDF
#+begin_src emacs-lisp :tangle yes
  (eval-after-load "org"
    '(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.x?html?\\'" . "firefox %s")
        ("\\.pdf\\(::[0-9]+\\)?\\'" . whatacold/org-pdf-app)
        ("\\.gif\\'" . "eog \"%s\"")
        ("\\.mp4\\'" . "vlc \"%s\"")
        ("\\.mkv" . "vlc \"%s\""))))

  (defun whatacold/org-pdf-app (file-path link-without-schema)
    "Open pdf file using pdf-tools and go to the specified page."
    (let* ((page (if (not (string-match "\\.pdf::\\([0-9]+\\)\\'"
                                      link-without-schema))
                     1
                   (string-to-number (match-string 1 link-without-schema)))))
      (require 'subr-x)
      (start-process "evince" "evince" "evince" (concat "--page-label=" (number-to-string page)) file-path)))
#+end_src
**** Presentations
Org tree slide is a presentation tool for org mode.
#+begin_src emacs-lisp :tangle yes
  (use-package org-tree-slide
    :bind (("<f10>" . 'org-tree-slide-move-next-tree)
           ("<f9>" . 'org-tree-slide-move-previous-tree)))
#+end_src
*** Git
**** Magit
 - Just load magit and give it a key.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

 - Reload files on git change.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit-filenotify)
#+END_SRC
**** Time-Machine
View the history of a file.

#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine)
#+end_src
**** Gutter
Mark changed lines on the fringes.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter-fringe+
    ;:diminish
    :config
    (global-git-gutter+-mode 1)
    (git-gutter-fr+-minimal)
    (git-gutter+-turn-on))
#+END_SRC
*** Sage Math
CAS for some annoying calculations.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sage-shell-mode
    :hook (sage-shell-after-prompt . sage-shell-view-mode))
#+END_SRC

*** Ivy
Make mini-buffers and search nicer.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           ("C-x r" . counsel-recentf)
           ("C-x b" . counsel-ibuffer)
           :map boon-command-map
           ("w" . swiper))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (with-eval-after-load 'recentf
      (setq ivy-use-virtual-buffers nil)))
#+END_SRC

*** LaTeX
Enable electric braces for math mode: ~\( \)~
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq LaTeX-electric-left-right-brace t)
    (setq reftex-plug-into-auctex t)
    (setq reftex-ref-macro-prompt nil)
    (setq reftex-label-alist '(AMSTeX))
  (defun my-auctex-init ()
    (turn-off-smartparens-mode)
    (auto-fill-mode)
    (latex-math-mode)
    (turn-on-reftex)
    (flyspell-mode 1))
    (add-hook 'LaTeX-mode-hook 'my-auctex-init)
#+END_SRC

**** Latexmk
Set up latexmk for easier making.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup))
#+END_SRC

**** TODO Use Tectonic
*** Javascript
**** JS2
Nicer JS mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :hook (js2-mode . js2-imenu-extras-mode))
#+END_SRC

Refactoring and some simple goodies, like killing a semantic entity
rather than a line.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-refactor
    :config (js2r-add-keybindings-with-prefix "C-c C-r")
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill))
    :hook (js2-mode . js2-refactor-mode))
#+END_SRC

**** RJSX
A js2 mode for a =jsx=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rjsx-mode)
#+END_SRC

**** JS-Doc
Documentation comment helper.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js-doc
    :bind (:map js2-mode-map
                ("C-c i" . js-doc-insert-function-doc)
                ("@" . js-doc-insert-tag))
    :config
    (setq js-doc-mail-address "hiro@protagon.space"
          js-doc-author (format "Valentin Boettcher <%s>" js-doc-mail-address)
          js-doc-url "protagon.space"
          js-doc-license "MIT"))
#+END_SRC

**** JSON
Json mode package.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode)
#+END_SRC

**** TODO Tern
JS Ide feautures. May be replaced by LSP.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'load-path "~/src/tern")
  (autoload 'tern-mode "tern.el" nil t)
  (add-hook 'js2-mode-hook #'tern-mode)
#+END_SRC

*** Elixir
Some junk for the elixir programming language.

**** Base Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elixir-mode
    :config
    (mapc (lambda (pair) (push pair prettify-symbols-alist))
          '(;; Syntax
            ("do" .      #x2770)
            ("|>" .      #x2A20)
            ("->" .      #x21A6)
            ("fn" .      #x03BB)
            ("quote" .      #x2358)
            ("unquote" .      #x236A)
            ("end" .      #x2771))))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :after ivy)

  (use-package counsel-projectile
    :after (ivy projectile)
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (counsel-projectile-mode))
#+END_SRC

*** Web Mode
A very neat mode for editing html and the like.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC

*** Emmet
Nice html and css snippets.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :hook ((sgml-mode . emmet-mode)
           (rjsx-mode . emmet-mode)
           (css-mode . emmet-mode)))
#+END_SRC

*** Flycheck
Syntax checking and linting.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :config (setq flycheck-check-syntax-automatically '(save mode-enable))
    :hook ((after-init . global-flycheck-mode)))
  (use-package avy-flycheck)
#+END_SRC

*** Python
**** Elpy
#+begin_src emacs-lisp :tangle yes
  (use-package elpy
    :init
    (elpy-enable)
    :config
    (add-hook 'elpy-mode-hook (lambda ()
                                (add-hook 'before-save-hook
                                          'elpy-black-fix-code nil t)))
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (setq python-shell-interpreter "jupyter"
          python-shell-interpreter-args "console --simple-prompt"
          python-shell-prompt-detect-failure-warning nil)
    (add-to-list 'python-shell-completion-native-disabled-interpreters
                 "jupyter"))
#+end_src

**** Anaconda
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package anaconda-mode
  ;;   :after (sphinx-doc python-docstring)
  ;;   :hook ((python-mode . anaconda-mode)
  ;;          (python-mode . anaconda-eldoc-mode)
  ;;          (python-mode .
  ;;                            (lambda ()
  ;;                              (sphinx-doc-mode t)
  ;;                              (whitespace-mode 1)
  ;;                              (python-docstring-mode 1)))))
  ;; (use-package company-anaconda)
#+END_SRC

**** Mark overlong Lines
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq whitespace-line-collumn 79)
  (setq whitespace-style '(face empty tabs lines-tail trailing))
#+END_SRC

**** Docstrings
Support for sphinx style docstrings.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python-docstring)
  (use-package sphinx-doc)
#+END_SRC

*** YASnippets
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-global-mode
    :config (yas-global-mode 1))
  (use-package elixir-yasnippets)
  (use-package yasnippet-snippets)
  (use-package yasnippet-classic-snippets)
  (use-package ivy-yasnippet)
  (use-package ivy-xref
    :init (setq xref-show-definitions-function #'ivy-xref-show-defs))
#+END_SRC

*** Jupyter-Notebooks
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ein
    :config (setq ein:output-type-preference
                  '(emacs-lisp svg png jpeg html text latex javascript)))
#+END_SRC

*** Fish
Fish shell script mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fish-mode)
#+END_SRC
*** Arch PKGBUILD
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pkgbuild-mode)
#+END_SRC
*** C++
Set up ~lsp~, ~ccls~.
#+begin_src emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))
  (use-package ccls
    :ensure t
    :config
    (setq ccls-executable "ccls")
    (setq lsp-prefer-flymake nil)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    (setq ccls-sem-highlight-method 'overlay)
    (ccls-use-default-rainbow-sem-highlight)
    (set-buffer-multibyte nil)            ;TODO: Better fix!
    :hook ((c-mode c++-mode objc-mode) .
           (lambda () (require 'ccls) (lsp))))
#+end_src

Automatically insert Include-Guards.
#+begin_src emacs-lisp :tangle yes

  ;; autoinsert C/C++ header
    (define-auto-insert
      (cons "\\.\\([Hh]\\|hh\\|hpp\\)\\'" "My C / C++ header")
      '(nil
        (let* ((noext (substring buffer-file-name 0 (match-beginning 0)))
                   (nopath (file-name-nondirectory noext))
                   (ident (concat (upcase nopath) "_H")))
          (concat "#ifndef " ident "\n"
                          "#define " ident  " 1\n\n\n"
                          "\n\n#endif // " ident "\n"))
        (make-string 70 ?/) "\n"
        "// $Log:$\n"
        "//\n"))

    ;; auto insert C/C++
    (define-auto-insert
      (cons "\\.\\([Cc]\\|cc\\|cpp\\)\\'" "My C++ implementation")
      '(nil
        (let* ((noext (substring buffer-file-name 0 (match-beginning 0)))
                   (nopath (file-name-nondirectory noext))
                   (ident (concat nopath ".h")))
          (if (file-exists-p ident)
                  (concat "#include \"" ident "\"\n")))
        (make-string 70 ?/) "\n"
        "// $Log:$\n"
        "//\n"))
#+end_src

Highlight Doxygen.
#+begin_src emacs-lisp :tangle yes
  (use-package highlight-doxygen
    :hook (c-mode-common . highlight-doxygen-global-mode))
#+end_src

Clang Format.
#+begin_src emacs-lisp :tangle yes
  (use-package clang-format+
    :hook (c-mode-common . clang-format+-mode))
#+end_src
*** YAML
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
*** Docker
#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode)
#+end_src
*** Regex
#+begin_src emacs-lisp :tangle yes
  (use-package regex-tool)
#+end_src
*** Meson
#+begin_src emacs-lisp :tangle yes
  (use-package meson-mode)
#+end_src
** Custom Scripts
*** Close all Buffers
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun close-all-buffers ()
    "Closes all buffers."
    (interactive)
    (mapc 'kill-buffer
          (buffer-list)))
#+END_SRC
*** Rename Buffer and File
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
#+END_SRC

*** Create Common Use-Package declaration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defmacro my-create-up-common (name &rest common-args)
    "Creates a use-package declaration that automatically adds
    predefined configuration."
    (declare (indent 1))
    `(defmacro ,name (package &rest args)
       (declare (indent 1))
       `(use-package ,package
          ,@args
          ,@',common-args)))
#+END_SRC
