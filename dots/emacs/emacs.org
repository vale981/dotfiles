#+TITLE: Hiro's Emacs Config
#+PROPERTY: header-args :results silent

* Hiro's Emacs Config
** General Stuff
*** Enable Lexical Binding
#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding: t -*-
#+end_src
*** Allow Dangerous Stuff
:PROPERTIES:
:ID:       5e3711ab-6ce4-4297-a757-e67ada5deb32
:END:
Allow downcase.
#+begin_src emacs-lisp :tangle yes
  (put 'downcase-region 'disabled nil)
#+end_src

*** Edit Config
:PROPERTIES:
:ID:       3ec4da82-3022-4d27-b205-f6d3826c735e
:END:
Shortcut to edit this file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun find-config ()
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
  (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC

*** Start Server
:PROPERTIES:
:ID:       2fefb864-628c-4ecc-877e-9b6487074768
:END:
Starts the emacs server.
#+BEGIN_SRC emacs-lisp :tangle yes
  (server-start)
#+END_SRC

*** Desktop
:PROPERTIES:
:ID:       6e7debf5-6388-4d1a-b082-71c9ded7bcfa
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (desktop-save-mode 1)
#+END_SRC

*** Auto-Save
:PROPERTIES:
:ID:       af9dde51-e5b2-476a-9851-76e51c0ec5e6
:END:
Let emacs auto-save in a separate directory. This spares me from
including all that emacs gruft in ~.gitignore~ files.

#+begin_src emacs-lisp :tangle yes
  (setq auto-save-file-name-transforms
    `((".*" "~/.emacs-saves/" t)))
#+end_src

*** Disable Annoying Comp Warnings
#+begin_src emacs-lisp :tangle yes
  (setq warning-suppress-log-types '((comp)))
#+end_src
** Hacks
*** Speed up Cursor Movement
:PROPERTIES:
:ID:       359303ad-78af-4d60-8f33-2c7cd7206f08
:END:
Taken from https://github.com/Atman50/emacs-config.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq auto-window-vscroll nil)
#+END_SRC
*** Read more data from child processes
:PROPERTIES:
:ID:       2073371e-adda-493d-b8c9-373bcf1302bd
:END:
#+begin_src emacs-lisp :tangle yes
  (setq read-process-output-max (* 1024 1024))
#+end_src
*** Disable Garbage Collection on Fontcache
:PROPERTIES:
:ID:       0eca2431-ad2c-47f2-821c-ab5eafe373ca
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-compacting-font-caches t)
#+END_SRC

** Packages
*** Straight
Straight is loaded in =~/.emacs= before anything else to then load the
latest org mode which loads this file.

*** Packages
:PROPERTIES:
:ID:       95e601a5-0c8a-4dbf-8629-9721765030ae
:END:
Set up package sources.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

*** Bootstrap Use-Package
:PROPERTIES:
:ID:       6b502930-7fac-49ec-9bec-9c94d9071fe6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

Use straight:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq straight-use-package-by-default t)
#+END_SRC

Install diminish:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diminish)
#+END_SRC

** Preferences
*** Boon
:PROPERTIES:
:ID:       0baef9d0-a5a4-48f2-9e88-2ffa87d15957
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region)
  (use-package boon
    :after expand-region
    :load-path "~/.emacs.d/boon/"
    :config
    (use-package expand-region)
    (require 'boon-workman)
    (add-to-list 'boon-special-mode-list 'sly-db-mode)
    (add-to-list 'boon-special-mode-list 'sly-inspector-mode)
    (add-to-list 'boon-special-mode-list 'cider-inspector-mode)
    (add-to-list 'boon-special-mode-list 'cider-macroexpansion-mode)
    (add-to-list 'boon-special-mode-list 'jupyter-repl-mode)
    (add-to-list 'boon-special-mode-list 'term-mode)
    (add-to-list 'boon-special-mode-list 'ansi-term-mode)
    (add-to-list 'boon-special-mode-list 'bufler-list-mode)
    (add-to-list 'boon-special-mode-list 'pdf-outline-buffer-mode)
    (add-to-list 'boon-special-mode-list 'git-timemachine-mode)
    (boon-mode))
#+end_src

*** Term
:PROPERTIES:
:ID:       97cb4819-4203-4cbc-a371-e62c69fabd67
:END:
HL line mode is nonsensical in term.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'term-mode-hook
            (lambda ()
              (setq cursor-type 'bar)
              (turn-off-boon-mode)
              (setq global-hl-line-mode nil)))

  ;; (use-package eterm-256color
  ;;   :config
  ;;   (add-hook 'term-mode-hook #'eterm-256color-mode))
#+end_src

*** VTerm
:PROPERTIES:
:ID:       dedeb938-0a53-463b-b1d3-424e366b7e31
:END:
VTerm has a ~c~ core and is faster + more compatible. We install this through nix.
#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :config
    (setq vterm-environment '("DIRENV_LOG_FORMAT="))
    (add-hook 'vterm-mode-hook
              (lambda ()
                (setq cursor-type 'bar)
                (turn-off-boon-mode)
                (setq global-hl-line-mode nil))))
#+end_src

And an org babel vterm mode. The contents of the block are run
aynchrounsily in another buffer. The contens of the shell buffer are
then inserted as result.

#+begin_src emacs-lisp :tangle yes
  (defun last-index-of (regex str &optional ignore-case)
    "Pilfered from
  https://stackoverflow.com/questions/27996264/lastindexof-using-regex-in-elisp"
    (let ((start 0)
          (case-fold-search ignore-case)
          idx)
      (while (string-match regex str start)
        (setq idx (match-beginning 0))
        (setq start (match-end 0)))
      idx))

  (defun run-in-vterm-kill (process event key org-buffer)
    "A process sentinel. Kills PROCESS's buffer if it is live."
    (sit-for .5)
    (let* ((b (process-buffer process))
           (result
            (substring
             (org-escape-code-in-string
              (string-trim-right
               (with-current-buffer b
                 (buffer-string))))
             0 -1))
           (result-without-exit
            (substring result 0
                       (last-index-of "\n" result))))

      (and (buffer-live-p b)
           (kill-buffer b))
      (with-current-buffer org-buffer
        (save-excursion
          (goto-char 0)
          (while (re-search-forward (concat ": " key) nil t 1)
            (replace-match
             (concat ":RESULTS:\n"
                     result-without-exit
                     "\n:END:")))))))

  (defun random-alnum ()
    (let* ((alnum "abcdefghijklmnopqrstuvwxyz0123456789")
           (i (% (abs (random)) (length alnum))))
      (substring alnum i (1+ i))))

  (defun random-string (n)
    (if (<= n 0)
        ""
      (concat (random-alnum) (random-string (- n 1)))))

  (defun org-babel-execute:vterm (body params)
    (let* ((key (random-string 20))
           (command (if (alist-get :noexit params 'nil)
                        body
                      (concat body "\nexit")))
           (org-buffer (current-buffer)))
      (with-current-buffer
          (vterm-other-window
           (concat (alist-get :term-name params "shell") "-*" key "*"))
        (set-process-sentinel
         vterm--process
         #'(lambda (process event)
             (run-in-vterm-kill process event key org-buffer)
             ))
        (vterm-send-string command)
        (vterm-send-return)
        key)))

  (add-to-list 'org-src-lang-modes '("vterm" . shell-script))
#+end_src

*** Custom
:PROPERTIES:
:ID:       1ede7fc3-889f-425e-84e4-8a9eabce2866
:END:
Prevent custom from preserving state.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

*** General
:PROPERTIES:
:ID:       12ffac7a-903b-4c84-ba0d-31366d4bdca7
:END:
No startup screen.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-startup-screen t)
#+END_SRC

Hide obstractions.
#+BEGIN_SRC emacs-lisp :tangle yes
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

No cursor blink.
#+BEGIN_SRC emacs-lisp :tangle yes
  (blink-cursor-mode 0)
#+END_SRC

*** Sound
:PROPERTIES:
:ID:       40ee9fc9-39bf-45e3-94a8-9ce8cba65257
:END:
No terminal bell.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Whitespace
:PROPERTIES:
:ID:       4d26afac-fc06-432b-88f0-c56beca9208b
:END:
Ethan wspace mode resolves the nightmare of mixed whitespace.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ethan-wspace
    :config (global-ethan-wspace-mode 1)
    (setq mode-require-final-newline nil))
#+END_SRC

**** Tabs
:PROPERTIES:
:ID:       ffbdaa5a-26ba-47e3-8661-b77e1fe1dfe6
:END:
Don't use 'em.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Pairs
:PROPERTIES:
:ID:       8e6afa0c-941d-4ec8-a1c4-1d40c79959bc
:END:
Enable electric pairs.
#+BEGIN_SRC emacs-lisp :tangle yes
  (electric-pair-mode 1)
#+END_SRC

Show parens.
#+begin_src emacs-lisp :tangle yes
  (require 'paren)
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+end_src

*** Theme
:PROPERTIES:
:ID:       ea6f41b1-8067-452f-9b99-40bb573500f6
:END:
We use the doom theme.
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons)
  (use-package doom-themes
    :after all-the-icons
    :config
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-light t)
    (doom-themes-treemacs-config)
    (doom-themes-org-config)
    )

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src
*** Font and Editor
:PROPERTIES:
:ID:       33861a6a-1617-4633-be00-5587dbf8e6ce
:END:
- Set font to ~JetBrains Mono~.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist
               '(font . "JetBrains Mono-12:weight=light:antialias=subpixel"))

  (set-face-attribute 'mode-line nil :font "JetBrains Mono-12:weight=light:antialias=subpixel")

  (add-to-list 'default-frame-alist
               '(internal-border-width . 0))
#+END_SRC

*** Highlight current line.
:PROPERTIES:
:ID:       77be21fb-9db5-497e-af66-1b4cc804d026
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-hl-line-mode 1)
#+END_SRC

This allows us to disable it locally

#+begin_src emacs-lisp :tangle yes
  (make-variable-buffer-local 'global-hl-line-mode)
#+end_src

*** Compilation
:PROPERTIES:
:ID:       00d0bc01-ca6b-4f53-9aef-12f92d6224bb
:END:
Reuse the compilation frame instead of annoyingly creating new ones.
#+begin_src emacs-lisp :tangle yes
  (add-to-list
   'display-buffer-alist
   '("\\*compilation\\*" display-buffer-reuse-window
                           (reusable-frames . t)))
#+end_src

And scroll the compilation output.
#+begin_src emacs-lisp :tangle yes
  (setq compilation-scroll-output t)
#+end_src

** Interface
*** General Tweaks
:PROPERTIES:
:ID:       53254477-f03e-44b4-bb80-6e6bf9fd28c5
:END:
Short =yes-no=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Orderless
A nice completion style.
#+begin_src emacs-lisp :tangle yes
  (use-package orderless
    :config
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion)))))
    (savehist-mode))
#+end_src
*** Selectrum
Use selectrum for selection dialogs.
#+begin_src emacs-lisp :tangle yes
  (use-package selectrum
    :config (selectrum-mode +1)
    (setq orderless-skip-highlighting (lambda () selectrum-is-active))
    (setq selectrum-highlight-candidates-function #'orderless-highlight-matches))
#+end_src

*** Marginalia
Extra info in the minibuffer.
#+begin_src emacs-lisp :tangle yes
;; Enable richer annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

*** Consult
Swiper and rg alternative.
#+begin_src emacs-lisp :tangle yes
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer) ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)     ;; orig. yank-pop
           ("<help> a" . consult-apropos) ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake) ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)   ;; orig. goto-line
           ("M-g M-g" . consult-goto-line) ;; orig. goto-line
           ("M-g o" . consult-outline) ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)

           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map boon-command-map
           ("w" . consult-line)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history) ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history) ;; orig. isearch-edit-string
           ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)) ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (project-roots)
    ;; (setq consult-project-root-function
    ;;       (lambda ()
    ;;         (when-let (project (project-current))
    ;;           (car (project-roots project)))))
  ;;;; 2. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)
  ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
  ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )
#+end_src

*** Embark
#+begin_src emacs-lisp :tangle yes
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Multiple Cursors
:PROPERTIES:
:ID:       14313a37-a3d7-41b9-a2b6-b79c8459c22a
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("M-<mouse-1>" . mc/add-cursor-on-click)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           :prefix "C-c m"
           :prefix-map my/mc-map
           ("c" . mc/edit-lines)
           ("<" . mc/mark-all-like-this)))
  :config (put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Previous/Next Buffer
:PROPERTIES:
:ID:       033b54d9-e5a3-420c-af9e-26be143c20e7
:END:
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-p") 'previous-buffer)
  (global-set-key (kbd "M-n") 'next-buffer)
#+end_src

*** Misc
:PROPERTIES:
:ID:       5a653d75-bc36-479d-8f4f-1bf83d5f0af2
:END:
Centralize the backup location.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t      ; Don't delink hardlinks
        version-control t        ; Use version numbers on backups
        delete-old-versions t    ; Automatically delete excess backups
        kept-new-versions 20 ; how many of the newest versions to keep
        kept-old-versions 5  ; and how many of the old
        )
#+END_SRC

*** Navigation
**** Avy
:PROPERTIES:
:ID:       45e310ac-0893-46f7-ad4e-fd10e4223d5d
:END:
Jump to char.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy
    :bind (("M-g w" . avy-goto-word-1)
           ("M-g f" . avy-goto-line)
           ("C-'" . avy-goto-char)
           ("C-;" . avy-goto-char-2)))
#+END_SRC

*** Move Lines
:PROPERTIES:
:ID:       ada00b7c-b930-4a89-89d7-054e142ee913
:END:
Move whole lines easily.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :diminish
    :config (move-text-default-bindings))
#+END_SRC

*** Treemacs
:PROPERTIES:
:ID:       cfb56f78-fbaa-46ae-b291-b4363695dfbe
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :bind ("<f5>" . projectile-compile-project)
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC

*** Rainbow Delimiters, Identifiers
:PROPERTIES:
:ID:       dc0ff24a-4d59-42b4-b99b-95b65274ceb0
:END:
Color code matching delimiters.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-identifiers
    :hook (julia-mode . rainbow-identifiers-mode))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Ligatures
:PROPERTIES:
:ID:       6d6b7fe3-bdcd-4392-bca4-915a433e4e3c
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ligature
    :straight (:host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't
                            '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
                              "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
                              "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
                              "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
                              "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
                              "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
                              "<:" ":<" ":>" ">:" "<>" ";;" "/==" ".=" ".-" "__"
                              "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
                              ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
                              "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
                              "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
                              "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
                              "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
                              "&=" "+="))
    (global-ligature-mode t))
#+end_src
*** Ripgrep
:PROPERTIES:
:ID:       961b4dd1-6784-4cf5-a347-8d603c1ba3b5
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package rg
    :config
    (rg-enable-default-bindings)
    :bind ("C-x p" . rg-menu))
#+end_src

*** Flyspell
:PROPERTIES:
:ID:       eac8b2db-730c-48c0-9765-857e2afcbdbb
:END:
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct-ivy
    :bind ("C-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

*** Hydra
:PROPERTIES:
:ID:       b4a81a76-c3ec-44eb-8beb-664fcb218311
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package hydra)
#+end_src
*** Direnv Support
:PROPERTIES:
:ID:       de7c7800-9d2a-49bf-a004-159d688fd715
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package direnv
   :config
   (direnv-mode))
#+end_src
*** Writeroom
:PROPERTIES:
:ID:       7ef0eb70-75c3-4f69-b50d-637fc34051bb
:END:
Distraction free writing.

#+begin_src emacs-lisp :tangle yes
  (use-package writeroom-mode)
#+end_src

*** Ace Window
:PROPERTIES:
:ID:       73c8bf4d-9124-404a-82fb-15db7bd11396
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
*** PDF Tools
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :config
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-source-correlate-start-server t)

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook
              'pdf-view-auto-slice-minor-mode)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src
*** Return to Minibuffer
Taken from [[https://emacs.stackexchange.com/questions/42287/set-focus-to-minibuffer-window][stackoverlow]]. Returns the focus to the minibuffer.
#+begin_src emacs-lisp :tangle yes
  (defun switch-to-minibuffer ()
    "Switch to minibuffer window."
    (interactive)
    (if (active-minibuffer-window)
        (select-window (active-minibuffer-window))
      (error "Minibuffer is not active")))

  (global-set-key "\C-co" 'switch-to-minibuffer) ;
#+end_src
*** Highlight Indent
#+begin_src emacs-lisp :tangle yes
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top)

    :hook (prog-mode . highlight-indent-guides-mode))
#+end_src

*** Whichkey
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :config (which-key-mode))
#+end_src

** Programming / Language Support
*** Corfu
Completion at point.
#+begin_src emacs-lisp :tangle yes
  (use-package corfu
    :custom
    (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)  ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
    (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    (corfu-quit-no-match t) ;; Automatically quit if there is no match
    ;; (corfu-echo-documentation nil) ;; Do not show documentation in the echo area

    ;; Opt
    :config
    (setq tab-always-indent 'complete)
    (corfu-global-mode))
#+end_src
*** LSP
:PROPERTIES:
:ID:       114a9729-b4a7-4cb8-81cf-89f0eeafb316
:END:
Support for the =Language Server Protocol=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-ui)
  (use-package lsp-treemacs)
  (use-package lsp-mode
    :after (lsp-ui elixir-mode)
    :config
    (setq lsp-prefer-flymake nil)
    (setq
     lsp-headerline-breadcrumb-enable nil
     lsp-idle-delay .5
     lsp-ui-doc-enable nil
     lsp-ui-doc-use-childframe t
     lsp-ui-doc-position 'top
     lsp-ui-doc-include-signature t
     lsp-ui-sideline-enable t
     lsp-ui-flycheck-enable t
     lsp-ui-flycheck-list-position 'right
     lsp-ui-flycheck-live-reporting t
     lsp-ui-peek-enable t
     lsp-ui-peek-list-width 60
     lsp-ui-peek-peek-height 25
     lsp-enable-semantic-highlighting t
     lsp-enable-symbol-highlighting nil
     lsp-completion-provider :none
     lsp-modeline-code-actions-segments '(count icon)
     lsp-clients-clangd-args '("--background-index" "-j=2" "--clang-tidy" "--cross-file-rename" "--log=verbose"))
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)

    :hook ((elixir-mode . lsp)
           (lsp-mode . lsp-ui-mode)
           ;; (lsp-mode . (lambda ()
           ;;               (company-mode -1)
           ;;               (corfu-mode 1)))
           ))

  (use-package dap-mode
    :config
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra)))
    (setq dap-auto-configure-features
          '(sessions locals controls tooltip))
    :hook ((c-mode c++-mode) .
           (lambda ()
             (let ((cpptools (getenv "CPPTOOLS")))
               (setq dap-cpptools-debug-path
                     (concat cpptools "/share/vscode/extensions/ms-vscode.cpptools/"))
               (setq dap-cpptools-debug-program
                     (list
                      (concat cpptools
                              "/share/vscode/extensions/ms-vscode.cpptools/debugAdapters/OpenDebugAD7")))
               (require 'dap-cpptools)))))



#+END_SRC

*** Separedit
:PROPERTIES:
:ID:       a914f70d-d05e-427a-aa5c-2cb24cee0858
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package separedit
    :config
    (setq separedit-default-mode 'rst-mode)
    (add-to-list 'separedit-string-quotes-alist
                 '(julia-mode     . ("\"\"\"" "\""))
                 '(python-mode     . ("\"\"\"" "\"")))
    :bind
    (:map prog-mode-map
          ("C-c '" . separedit)))

#+end_src

*** Lisp
**** Roswell
:PROPERTIES:
:ID:       0ec09485-7f6f-4557-8c79-ac732c6b27cc
:END:
Support for the roswell package manager.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;(load (expand-file-name "~/.roswell/helper.el"))
#+END_SRC

**** Lispy Mode
:PROPERTIES:
:ID:       ab3ddba8-e875-47cf-b63c-427fbe504d36
:END:
A lisp code navigation extension that exploits the syntax of lisp to
avoid modifiers.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lispy
    :diminish
    :bind (("M-(" . lispy-parens-auto-wrap))
    :config
    (setq lispy-use-sly t)
    (setq lispy-compat '(cider))
    (let ((custom-bindings '(("u" . lispy-up)
                             ("p" . lispy-down)
                             ("n" . lispy-left)
                             ("o" . lispy-right)
                             ("e" . lispy-flow)
                             ("i" . lispy-different)
                             ("j" . lispy-eval-other-window)
                             ("h" . lispy-eval)
                             ("l" . lispy-other-mode)
                             ("f" . lispy-new-copy)
                             ("F" . lispy-narrow)
                             ("d" . lispy-undo)
                             ("k" . lispy-tab))))
      (dolist (binding custom-bindings)
        (lispy-define-key lispy-mode-map (car binding) (cdr binding))))
    :hook ((emacs-lisp-mode . lispy-mode)
           (eval-expression-minibuffer-setup . lispy-mode)
           (ielm-mode . lispy-mode)
           (lisp-mode . lispy-mode)
           (common-lisp-mode . lispy-mode)
           (lisp-interaction-mode . lispy-mode)
           (scheme-mode . lispy-mode)
           (racket-mode . lispy-mode)
           (clojure-mode . lispy-mode)))
#+END_SRC

**** Cider
:PROPERTIES:
:ID:       5a524ad4-fa26-4f29-b32c-1d1376c4e4bd
:END:
Clojure IDE.
#+begin_src emacs-lisp :tangle yes
  (use-package cider
    :config
    (setq cider-font-lock-dynamically '(macro core function var)))
#+end_src

***** clj-refactor
:PROPERTIES:
:ID:       e2f52a4a-a2c6-4b1b-961b-d550ae39b1c9
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package clj-refactor
    :config (cljr-add-keybindings-with-prefix "C-c C-m")
    (setq cljr-warn-on-eval nil)
    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1)      ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))
    :hook (cider-mode . my-clojure-mode-hook))
#+end_src
**** Sly
:PROPERTIES:
:ID:       879ca264-d5e4-495a-a0fd-362f9c5056ad
:END:
Slime fork with new features.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sly
    :config (setenv "APP_ENV" "development"))
  (use-package sly-repl-ansi-color
    :after sly)
  (use-package sly-quicklisp
    :after sly)
  (use-package sly-macrostep
    :after sly)
#+END_SRC

*** Racket
:PROPERTIES:
:ID:       1a617fa1-9cf6-4ba4-960a-7b01d5fc3c53
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package geiser)

  (use-package racket-mode
    :config (defun my-racket-mode-hook ()
              (setq-local eldoc-documentation-function #'racket-eldoc-function))
    :hook (racket-mode . my-racket-mode-hook))
#+end_src

*** Poly Mode
:PROPERTIES:
:ID:       921ceae1-2e82-4083-8da0-cb910cfd8363
:END:
Multiple major modes in one buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package polymode
  ;;   :config
  ;;   (use-package poly-markdown)
  ;;   ;; (use-package poly-org)
  ;;   (use-package poly-rst))
#+END_SRC

*** Org Mode
**** General Tweaks
:PROPERTIES:
:ID:       0684cabd-733b-40e5-86cb-47de1c562e7e
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-clock-persist 'history)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook (lambda () (setq-local yas-indent-line 'fixed)))
  (org-clock-persistence-insinuate)
  (setq org-id-link-to-org-use-id 'create-if-interactive)
#+END_SRC
**** Bars
Add pretty bars to the org indent.
#+begin_src emacs-lisp :tangle yes
  ;; (use-package org-bars
  ;;   :straight (:host github :repo "tonyaldon/org-bars")
  ;;   :hook (org-mode . org-bars-mode)
  ;;   :config
  ;;   (setq org-bars-color-options '(:desaturate-level-faces 30 :darken-level-faces 15)))
#+end_src

And disable the ellipsis.
#+begin_src emacs-lisp :tangle yes
  ;; (defun org-no-ellipsis-in-headlines ()
  ;;   "Remove use of ellipsis in headlines.
  ;; See `buffer-invisibility-spec'."
  ;;   (remove-from-invisibility-spec '(outline . t))
  ;;   (add-to-invisibility-spec 'outline))

  ;; (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines)
#+end_src

**** Refile
:PROPERTIES:
:ID:       25e8eb21-b15c-4cd1-9cde-4b458a885b71
:END:
- Targets include this file and any file contributing to the agenda - up to 9 levels deep
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets
        (quote
         ((nil :maxlevel . 9)
          (org-agenda-files :maxlevel . 9))))
#+END_SRC

- Use full outline paths for refile targets - we file directly with IDO
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-use-outline-path t)
#+END_SRC

- Targets complete directly with IDO
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

- Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

- Use the current window for indirect buffer display
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-indirect-buffer-display 'current-window)
#+END_SRC

- Exclude DONE state tasks from refile targets
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2
                    (org-heading-components))
               org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

**** Agenda
:PROPERTIES:
:ID:       0c5b4ae0-6278-4f9f-b71c-8cd6ddc6842e
:END:
- Formatting: Add path to Items
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          (timeline . "  % s")
          (todo .
                " %i %-12:c [%b] ")
          (tags .
                " %i %-12:c [%b] ")
          (search . " %i %-12:c")))
#+END_SRC

- Custom Agenda Commands
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(("X" agenda
           ""
           nil
           ("~/Documents/org/out/agenda.html"))
          ("n" "Notes"
           tags
           "NOTE"
           ((org-agenda-overriding-header "Notes")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/notes.html"))
          ("s" "Next"
           todo
           "NEXT"
           ((org-agenda-overriding-header "Next")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/next.html"))
          ("f" "Questions"
           tags
           "QUESTION"
           ((org-agenda-overriding-header "Questions")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/question.html"))
          ("l" "Einkaufsliste"
           todo
           "OUTOFSTOCK"
           ((org-agenda-overriding-header "Einkaufsliste")
            (org-tags-match-list-sublevels t))
           ("~/Documents/org/out/einkaufsliste.html"))))
#+END_SRC

**** Super Agenda
:PROPERTIES:
:ID:       6ab271bc-30b2-444c-9678-8f6e6416f010
:END:
Buff the agenda to use Groups.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-super-agenda
    :config
    (setq org-super-agenda-groups
          '((:name "NEXT"
                   :order 1
                   :todo "NEXT")
            (:name "WAITING"
                   :order 2
                   :todo "WAITING")
            (:name "TODO"
                   :order 3
                   :auto-outline-path t
                   :todo "TODO")))
    (org-super-agenda-mode 1))
#+END_SRC

**** Keybindings
:PROPERTIES:
:ID:       b736811c-d62e-4cc1-bdce-9fa7eeca04fa
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (define-key org-mode-map (kbd "C-S-<return>") 'org-insert-todo-heading)
#+END_SRC

**** Numbers in Heading
:PROPERTIES:
:ID:       25dbd121-47df-4035-8978-598034404cce
:END:
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-num-mode)
#+end_src

**** Directories
:PROPERTIES:
:ID:       47490474-e7cb-4b82-83f6-d794771c985e
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "~/Documents/org")
  (setq org-default-notes-file "~/Documents/org/refile.org")
#+END_SRC

Agenda Files:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
   org-agenda-files
   (list "~/Documents/org/todo.org"
         "~/Documents/Projects/UNI/master/masterarb/project.org"))
#+END_SRC

**** Automatically mark task as done if all subtasks are done
:PROPERTIES:
:ID:       a7c4a187-a647-43fd-b96c-5fe2ca469f74
:END:
#+begin_src emacs-lisp :tangle yes
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src
**** Custom States
:PROPERTIES:
:ID:       9a13b076-b2cb-4617-85a0-8f37a18c15eb
:END:
- states
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO" "WAITING" "NEXT" "HOLD" "|"
                  "DONE")
        (sequence "BESORGEN" "WARTEN" "|" "BESORGT")
        (sequence "OUTOFSTOCK" "|" "INSTOCK")
        (sequence "RESOLVE" "ASK" "RESEARCH" "|" "RESOLVED")
        (sequence "HOMEWORK" "ACTIVE" "|" "FINISHED")))
#+END_SRC

- triggers
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-state-tags-triggers
        (quote
         (("CANCELLED"
           ("CANCELLED" . t))
          ("WAITING"
           ("WAITING" . t))
          ("HOLD"
           ("WAITING")
           ("HOLD" . t))
          (done ("WAITING")
                ("HOLD"))
          ("TODO"
           ("WAITING")
           ("CANCELLED")
           ("HOLD"))
          ("NEXT"
           ("WAITING")
           ("CANCELLED")
           ("HOLD"))
          ("DONE"
           ("WAITING")
           ("CANCELLED")
           ("HOLD")))))
#+END_SRC
**** Capture Templates
:PROPERTIES:
:ID:       534bc598-1e8f-4f63-91b9-2653d30cd173
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        (quote
         (("t" "Todo"
           entry
           (file org-default-notes-file)
           "* TODO %?\n%U\n%a\n")
          ("n" "Note"
           entry
           (file org-default-notes-file)
           "* %? :NOTE:\n%U\n%a\n")
          ("q" "Question"
           entry
           (file "~/Documents/org/refile/questions.org")
           "* RESOLVE %? :QUESTION:\n%U\n%a\n")
          ("e" "Exercise"
           entry
           (file "~/Documents/org/refile/exercises.org")
           "* HOMEWORK %? :EXERCISE:\n%a\n")
          ("j" "Journal"
           entry
           (file+datetree "~/Documents/org/diary.org")
           "**** %?\n%U\n")
          ("m" "Meeting"
           entry
           (file+headline "~/Documents/org/general.org" "Meetings")
           "** %? :MEETING:\n")
          ("p" "Appointment"
           entry
           (file+headline "~/Documents/org/general.org" "Appointments")
           "** %? :APPOINTMENT:\n"))))
#+END_SRC

For =ox-hugo=.
#+begin_src emacs-lisp :tangle yes
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")                ;Place the cursor here finally
                 "\n")))

    (add-to-list 'org-capture-templates
                 '("h"                ;`org-capture' binding + h
                   "Hugo post"
                   entry
                   ;; It is assumed that below file is present in `org-directory'
                   ;; and that it has a "Blog Ideas" heading. It can even be a
                   ;; symlink pointing to the actual location of all-posts.org!
                   (file+olp "content.org" "Blog" "Uncategorized")
                   (function org-hugo-new-subtree-post-capture-template)))
#+end_src

**** Babel
:PROPERTIES:
:ID:       f14de4ec-7360-497f-be62-7a53c4922a73
:END:
#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (sqlite . t)))

  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

  ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (setq org-startup-with-inline-images t)
  (setq imagemagick-types-inhibit t)
  (define-key org-mode-map (kbd "M-j")
    #'(lambda ()
       (interactive)
       (org-babel-execute-src-block)
       (org-babel-next-src-block)))

#+end_src


Htmlize for nice org html export.
#+begin_src emacs-lisp :tangle yes
  (use-package htmlize)
#+end_src

And dont evaluate code again.
#+begin_src emacs-lisp :tangle yes
  (setq org-export-use-babel nil)
#+end_src

Automatically tangle on save.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'org-babel-tangle nil 'make-it-local)))
#+end_src

Format python code with black.
#+begin_src emacs-lisp :tangle yes
  ;; (define-advice org-edit-src-exit (:before (&rest _args) format-python)
  ;;   "Run `python-black-buffer' on Python code."
  ;;   (when (and (local-variable-if-set-p 'org-src-mode)
  ;;              (eq major-mode 'python-mode))
  ;;     (message "Formatting python code...")
  ;;     (python-black-buffer)))

#+end_src

Display stderr if the shell fails.
#+begin_src emacs-lisp :tangle yes
  (defvar org-babel-eval-verbose t
    "A non-nil value makes `org-babel-eval' display")

  (defun org-babel-eval (cmd body)
    "Run CMD on BODY.
  If CMD succeeds then return its results, otherwise display
  STDERR with `org-babel-eval-error-notify'."
    (let ((err-buff (get-buffer-create " *Org-Babel Error*")) exit-code)
      (with-current-buffer err-buff (erase-buffer))
      (with-temp-buffer
        (insert body)
        (setq exit-code
              (org-babel--shell-command-on-region
               (point-min) (point-max) cmd err-buff))
        (if (or (not (numberp exit-code)) (> exit-code 0)
                (and org-babel-eval-verbose (> (buffer-size err-buff) 0))) ; new condition
            (progn
              (with-current-buffer err-buff
                (org-babel-eval-error-notify exit-code (buffer-string)))
              nil)
          (buffer-string)))))
#+end_src

**** Evince for PDF, Xournal for xoj
:PROPERTIES:
:ID:       d9b3dab5-4e9f-4ab2-a40f-40f1268a1670
:END:

I have disabled evince for now.
#+begin_src emacs-lisp :tangle yes
  (eval-after-load "org"
    '(setq org-file-apps
           '((auto-mode . emacs)
             ("\\.x?html?\\'" . "firefox %s")
             ;; ("\\.pdf\\(::[0-9]+\\)?\\'" . whatacold/org-pdf-app)
             ("\\.gif\\'" . "eog \"%s\"")
             ("\\.mp4\\'" . "vlc \"%s\"")
             ("\\.mkv" . "vlc \"%s\"")
             ("\\.xoj" . "xournal \"%s\"")
             ("\\.svg" . "firefox \"%s\"")
             ("\\.webm" . "vlc \"%s\""))))

  ;; (defun whatacold/org-pdf-app (file-path link-without-schema)
  ;;   "Open pdf file using pdf-tools and go to the specified page."
  ;;   (let* ((page (if (not (string-match "\\.pdf::\\([0-9]+\\)\\'"
  ;;                                     link-without-schema))
  ;;                    1
  ;;                  (string-to-number (match-string 1 link-without-schema)))))
  ;;     (require 'subr-x)
  ;;     (start-process "evince" "evince" "evince" (concat "--page-label=" (number-to-string page)) file-path)))
#+end_src

#+RESULTS:
: whatacold/org-pdf-app

**** Presentations
:PROPERTIES:
:ID:       1d6c1a53-fb56-4cb1-8c09-868c0126b6c9
:END:
Org tree slide is a presentation tool for org mode.
#+begin_src emacs-lisp :tangle yes
  (use-package org-tree-slide
    :bind (("<f10>" . 'org-tree-slide-move-next-tree)
           ("<f9>" . 'org-tree-slide-move-previous-tree)))
#+end_src
**** LaTeX preview size
:PROPERTIES:
:ID:       b6beac7c-6b2e-433f-80a8-2c77f4df6aef
:END:
#+begin_src emacs-lisp :tangle yes
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
**** Instant latex preview
:PROPERTIES:
:ID:       efa1372a-d79f-4eb2-bee8-572fa1aa2669
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package org-fragtog
  ;;   :hook org-mode)
#+end_src
**** Archive all DONE
:PROPERTIES:
:ID:       30bddaf0-e2c0-4d52-85d1-984d8509f8f4
:END:
#+begin_src emacs-lisp :tangle yes
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))
#+end_src
**** Screenshots
:PROPERTIES:
:ID:       850d926a-992b-4f09-9fce-1cd38cfdba0f
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package org-download)
  (use-package org-attach-screenshot
    :bind ("<f6> s" . org-attach-screenshot)
    :config
    (setq org-attach-screenshot-dirfunction
          (lambda ()
            (progn (cl-assert (buffer-file-name))
                   (concat (file-name-sans-extension (buffer-file-name))
                           "-att")))
          org-attach-screenshot-command-line "gnome-screenshot -a -f %f")

    (setq org-attach-screenshot-command-line "xfce4-screenshooter -r -s %f"))
#+end_src
**** Hugo
:PROPERTIES:
:ID:       af2d7bd1-c43d-4bdc-9bdc-eae7ba922f6a
:END:
Ox-hugo allows to export org mode to hugo for my [[https://protagon.space][website]].
#+begin_src emacs-lisp :tangle yes
  (use-package ox-hugo
      :after ox)
#+end_src
**** Org Ref
:PROPERTIES:
:ID:       7f5826e2-ac3d-4f59-a8f0-1e8810d6d177
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package citeproc)
  (use-package org-ref
    :after (citeproc)
    :config
    (require 'org-macs)

    (setq bibtex-completion-bibliography '("~/bibliography/references.bib")
          bibtex-completion-library-path '("~/bibliography/bibtex-pdfs/")
          bibtex-completion-notes-path "~/bibliography/notes.org"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath)))
    (setq org-ref-pdf-directory bibtex-completion-library-path)
    ;; (require 'org-ref-ivy)
    )
#+end_src

We add scihub as a pdf source.
#+begin_src emacs-lisp :tangle yes
  (defun sci-hub-pdf-url (doi)
    "Get url to the pdf from SCI-HUB"
    (setq *doi-utils-pdf-url* (concat "https://sci-hub.se/" doi) ;captcha
          ,*doi-utils-waiting* t
          )
    ;; try to find PDF url (if it exists)
    (url-retrieve (concat "https://sci-hub.se/" doi)
                  (lambda (status)
                    (goto-char (point-min))
                    (while (search-forward-regexp "\\(https://\\|//sci-hub.se/downloads\\).+download=true'" nil t)
                      (let ((foundurl (match-string 0)))
                        (message foundurl)
                        (if (string-match "https:" foundurl)
                            (setq *doi-utils-pdf-url* foundurl)
                          (setq *doi-utils-pdf-url* (concat "https:" foundurl))))
                      (setq *doi-utils-waiting* nil))))
    (while *doi-utils-waiting* (sleep-for 0.1))
    ,*doi-utils-pdf-url*)

  (defun doi-utils-get-bibtex-entry-pdf (&optional arg)
    "Download pdf for entry at point if the pdf does not already exist locally.
  The entry must have a doi. The pdf will be saved to
  `org-ref-pdf-directory', by the name %s.pdf where %s is the
  bibtex label.  Files will not be overwritten.  The pdf will be
  checked to make sure it is a pdf, and not some html failure
  page. You must have permission to access the pdf. We open the pdf
  at the end if `doi-utils-open-pdf-after-download' is non-nil.

  With one prefix ARG, directly get the pdf from a file (through
  `read-file-name') instead of looking up a DOI. With a double
  prefix ARG, directly get the pdf from an open buffer (through
  `read-buffer-to-switch') instead. These two alternative methods
  work even if the entry has no DOI, and the pdf file is not
  checked."
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let ( ;; get doi, removing http://dx.doi.org/ if it is there.
            (doi (replace-regexp-in-string
                  "https?://\\(dx.\\)?.doi.org/" ""
                  (bibtex-autokey-get-field "doi")))
            (key (cdr (assoc "=key=" (bibtex-parse-entry))))
            (pdf-url)
            (pdf-file))
        (setq pdf-file (concat
                        (if org-ref-pdf-directory
                            (file-name-as-directory (car org-ref-pdf-directory))
                          (read-directory-name "PDF directory: " "."))
                        key ".pdf"))
        ;; now get file if needed.
        (unless (file-exists-p pdf-file)
          (cond
           ((and (not arg)
                 doi
                 (if (doi-utils-get-pdf-url doi)
                     (setq pdf-url (sci-hub-pdf-url doi))
                   (setq pdf-url "https://www.sciencedirect.com/science/article/")))
            (url-copy-file pdf-url pdf-file)
            ;; now check if we got a pdf
            (if (org-ref-pdf-p pdf-file)
                (message "%s saved" pdf-file)
              (delete-file pdf-file)
              ;; sci-hub fallback option
              (setq pdf-url (sci-hub-pdf-url doi))
              (url-copy-file pdf-url pdf-file)
              ;; now check if we got a pdf
              (if (org-ref-pdf-p pdf-file)
                  (message "%s saved" pdf-file)
                (delete-file pdf-file)
                (message "No pdf was downloaded.") ; SH captcha
                (browse-url pdf-url))))
           ;; End of sci-hub fallback option
           ((equal arg '(4))
            (copy-file (expand-file-name (read-file-name "Pdf file: " nil nil t))
                       pdf-file))
           ((equal arg '(16))
            (with-current-buffer (read-buffer-to-switch "Pdf buffer: ")
              (write-file pdf-file)))
           (t
            (message "We don't have a recipe for this journal.")))
          (when (and doi-utils-open-pdf-after-download (file-exists-p pdf-file))
            (org-open-file pdf-file))))))
#+end_src

Download the paper from arxiv.
#+begin_src emacs-lisp :tangle yes
  (defun arxiv-utils-get-bibtex-entry-pdf (&optional arg)
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((arxiv (bibtex-autokey-get-field "eprint"))
             (key (cdr (assoc "=key=" (bibtex-parse-entry))))
             (pdf-url (concat "https://arxiv.org/pdf/" arxiv ".pdf"))
             (pdf-file (concat
                        (if org-ref-pdf-directory
                            (file-name-as-directory (cl-first org-ref-pdf-directory))
                          (read-directory-name "PDF directory: " "."))
                        key ".pdf")))
        ;; now get file if needed.
        (if (string-empty-p arxiv)
            (message "%s" (propertize "No arxiv entry!"
                                      'face '(:foreground "red")))
          (when (or (not (file-exists-p pdf-file))
                    (yes-or-no-p "File exists. Overwrite?"))
            (if (file-exists-p pdf-file)
                (delete-file pdf-file))
            (url-copy-file pdf-url pdf-file)
            ;; now check if we got a pdf
            (if (org-ref-pdf-p pdf-file)
                (message "%s saved" pdf-file)
              (delete-file pdf-file)))))))
#+end_src

**** Org Roam
:PROPERTIES:
:ID:       0f207452-8517-4c0b-bde8-80f80a88763c
:END:
See https://www.orgroam.com/manual.html.
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/org/roam")
    :config
    (setq
     org-roam-completion-everywhere t)
    (org-roam-db-autosync-mode)
    (setq orb-preformat-keywords '("citekey" "file"))
    (setq org-roam-capture-templates
          '(("d" "default" plain "%?"
             :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n")
             :unnarrowed t)
            ("r" "bibliography reference" plain
             (file "~/.emacs.d/roam-literature-template.org")
             :if-new
             (file+head "references/${citekey}.org" "#+title: ${title}\n")
             :unnarrowed t)))
    (setq rm-base "~/Documents/rm_notes")
    (defun my-get-note-name ()
      (let* ((filename (buffer-file-name (window-buffer (minibuffer-selected-window))))
             (relative (file-name-sans-extension (file-relative-name filename org-roam-directory))))
        relative))

    (defun open-rm-note ()
      "Opens the handwritten notes coressponding to the buffer."
      (interactive)
      (let ((pdf (concat (file-name-as-directory rm-base) (my-get-note-name) "/notes.pdf")))
        (if (file-exists-p pdf)
            (find-file pdf))))
    (defun sync-rm-note ()
      (interactive)
      (let ((name (my-get-note-name)))
        (shell-command (concat "bash "
                               "sync_rm "
                               name))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n s" . sync-rm-note)
           ("C-c n d" . open-rm-note)))
#+end_src

***** Bibtex
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam-bibtex
    :after (org-roam)
    :config
    (require 'org-ref)
    (setq orb-note-actions-interface 'hydra)
    (setq orb-process-file-keyword t)
    (setq orb-file-field-extensions '("pdf" "epub" "html"))
    (org-roam-bibtex-mode)
    :bind (("C-c n r" . orb-insert-link)
           ("C-c n a" . orb-note-actions)))
#+end_src

***** UI
For a nice mindmap in the browser.
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam-ui
    :straight
    '(:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

****  Org Noter
#+begin_src emacs-lisp :tangle yes
  (use-package org-noter
    :after org-roam
    :config
    (setq
     ;; The WM can handle splits
     org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil

     org-noter-set-auto-save-last-location t

     org-noter-notes-search-path (list (concat org-roam-directory "/references"))))
#+end_src

**** TODO Mathpix
:PROPERTIES:
:ID:       4d864096-b257-450c-b11c-ccd49dea6b8b
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package mathpix.el
  ;;   :straight (:host github :repo "jethrokuan/mathpix.el")
  ;;   :custom ((mathpix-app-id "app-id")
  ;;            (mathpix-app-key "app-key"))
  ;;   :bind
  ;;   ("C-x m" . mathpix-screenshot))
#+end_src
*** Git
**** Magit
:PROPERTIES:
:ID:       01ea61d7-eb1f-4f6b-b4f5-d4ea2bffeab4
:END:
- Just load magit and give it a key.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :init (require 'project)
    :bind ("C-x g" . magit-status))
#+END_SRC

- Reload files on git change.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit-filenotify)
#+END_SRC
**** Time-Machine
:PROPERTIES:
:ID:       96d780be-db71-4e19-b0f4-f41fe103ea71
:END:
View the history of a file.

#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine)
#+end_src
**** Highlight Diffs
:PROPERTIES:
:ID:       ebe9a7aa-3f9a-4ec9-b651-3018472e1f46
:END:
Mark changed lines on the fringes.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diff-hl
    :config (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
**** Forge
Integration for Git[Hub,Lab].
#+begin_src emacs-lisp :tangle yes
  (use-package forge
    :after magit
    :config
    (add-to-list
     'forge-alist
     (list "gitlab.hrz.tu-chemnitz.de" "gitlab.hrz.tu-chemnitz.de/api/v4"
           "gitlab.hrz.tu-chemnitz.de" forge-gitlab-repository)))
#+end_src
**** Blame
For nice inline blame.
#+begin_src emacs-lisp :tangle yes
  (use-package blamer
    :ensure t
    :bind (("s-i" . blamer-show-commit-info))
    :defer 20
    :custom
    (blamer-idle-time .3)
    (blamer-min-offset 70)
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                      :background nil
                      :height 120
                      :italic t))))
#+end_src

*** Sage Math
:PROPERTIES:
:ID:       dd2ade9d-25e7-4575-a3b9-76f5e7c580e2
:END:
CAS for some annoying calculations.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sage-shell-mode
    :hook (sage-shell-after-prompt . sage-shell-view-mode))
#+END_SRC

*** Ivy
:PROPERTIES:
:ID:       8c91633b-52ea-4957-9720-2164b79d424a
:END:
Make mini-buffers and search nicer.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ivy
  ;;   :diminish ivy-mode
  ;;   :bind (("C-s" . swiper)
  ;;          ("C-x r" . counsel-recentf)
  ;;          :map boon-command-map
  ;;          ("w" . swiper))
  ;;   :config
  ;;   (ivy-mode 1)
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq enable-recursive-minibuffers t)
  ;;   (with-eval-after-load 'recentf
  ;;     (setq ivy-use-virtual-buffers nil)))
#+END_SRC

*** LaTeX
:PROPERTIES:
:ID:       141f5f31-5bfd-4356-a205-27e25306a5cd
:END:
Enable electric braces for math mode: ~\( \)~
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq LaTeX-electric-left-right-brace t)
  (defun my-auctex-init ()
     (auto-fill-mode)
     (latex-math-mode)
     (turn-on-reftex)
     (flyspell-mode 1))
  (add-hook 'LaTeX-mode-hook 'my-auctex-init)
#+END_SRC

Configure AucTeX.
#+begin_src emacs-lisp :tangle yes
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+end_src

Custom math macros.
#+begin_src emacs-lisp :tangle yes
  ;(add-to-list 'LaTeX-math-list (list ?\; "dagger" "dagger" 8224))
#+end_src

**** RefTeX
:PROPERTIES:
:ID:       90b8584a-92fe-4032-b74a-a6c2610728fb
:END:
#+begin_src emacs-lisp :tangle yes
  (setq reftex-plug-into-auctex t)
  (setq reftex-ref-macro-prompt nil)
  (setq reftex-label-alist '(AMSTeX))
  (defun reftex-format-cref (label def-fmt ref-style)
    (format "\\cref{%s}" label))
  (setq reftex-format-ref-function 'reftex-format-cref)
#+end_src

**** Latexmk
:PROPERTIES:
:ID:       c7a8c0e0-b050-471a-8804-c7a20715bd25
:END:
Set up latexmk for easier making.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup))
#+END_SRC

**** TODO Use Tectonic
*** Javascript
**** JS2
:PROPERTIES:
:ID:       67935874-5a0d-4871-9cff-0207ec3ede99
:END:
Nicer JS mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :hook (js2-mode . js2-imenu-extras-mode))
#+END_SRC

Refactoring and some simple goodies, like killing a semantic entity
rather than a line.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-refactor
    :config (js2r-add-keybindings-with-prefix "C-c C-r")
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill))
    :hook (js2-mode . js2-refactor-mode))
#+END_SRC

**** RJSX
:PROPERTIES:
:ID:       cd707071-336a-4fe2-a2c3-92e0cad25c20
:END:
A js2 mode for a =jsx=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rjsx-mode)
#+END_SRC

**** JS-Doc
:PROPERTIES:
:ID:       0f490c55-f6b2-4ecf-ab44-533d68b1cc3c
:END:
Documentation comment helper.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js-doc
    :bind (:map js2-mode-map
                ("C-c i" . js-doc-insert-function-doc)
                ("@" . js-doc-insert-tag))
    :config
    (setq js-doc-mail-address "hiro@protagon.space"
          js-doc-author (format "Valentin Boettcher <%s>" js-doc-mail-address)
          js-doc-url "protagon.space"
          js-doc-license "MIT"))
#+END_SRC

**** JSON
:PROPERTIES:
:ID:       74517987-a646-4c18-a53a-14f42a732192
:END:
Json mode package.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode)
#+END_SRC

**** TODO Tern
:PROPERTIES:
:ID:       48b6fe23-a48d-43d1-a0de-0fa1e8d6b9f3
:END:
JS Ide feautures. May be replaced by LSP.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'load-path "~/src/tern")
  (autoload 'tern-mode "tern.el" nil t)
  (add-hook 'js2-mode-hook #'tern-mode)
#+END_SRC

*** Elixir
Some junk for the elixir programming language.

**** Base Mode
:PROPERTIES:
:ID:       2062b283-a743-48fd-9247-f361d61bd3ff
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elixir-mode
    :config
    ;; (mapc (lambda (pair) (push pair prettify-symbols-alist))
    ;;       '(;; Syntax
    ;;         ("do" .      #x2770)
    ;;         ("|>" .      #x2A20)
    ;;         ("->" .      #x21A6)
    ;;         ("fn" .      #x03BB)
    ;;         ("quote" .      #x2358)
    ;;         ("unquote" .      #x236A)
    ;;         ("end" .      #x2771)))
    )
#+END_SRC

*** Projectile
:PROPERTIES:
:ID:       da08907a-c833-4fe8-a9d7-c2263aed0049
:END:

The caching makes it /way/ faster.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    ;(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it))
    (setq projectile-enable-caching t)
    :after ivy)

  ;; (use-package counsel-projectile
  ;;   :after (ivy projectile)
  ;;   :config
  ;;   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;;   (counsel-projectile-mode))
#+END_SRC

*** Web Mode
:PROPERTIES:
:ID:       1d3441ed-8802-4ec1-a6a4-6645e1f727a7
:END:
A very neat mode for editing html and the like.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC

*** Emmet
:PROPERTIES:
:ID:       9b25f942-73fa-494a-8c59-93c8444dd9f0
:END:
Nice html and css snippets.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :hook ((sgml-mode . emmet-mode)
           (rjsx-mode . emmet-mode)
           (css-mode . emmet-mode)))
#+END_SRC

*** Flycheck
:PROPERTIES:
:ID:       e859a2c3-2de4-4912-bfb8-4b4d3b29ab6f
:END:
Syntax checking and linting.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :config
    (setq flycheck-check-syntax-automatically '(save mode-enable idle-change))
    (setq flycheck-idle-change-delay 2)
    :hook ((after-init . global-flycheck-mode)))
  (use-package avy-flycheck)
#+END_SRC

*** Python
**** LSP
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (when (executable-find "python3")
                             (setq lsp-pyright-python-executable-cmd "python3"))
                           (require 'lsp-pyright)
                           (lsp)))
    :config (setq python-shell-interpreter "ipython"
             python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True"))
  ;; (use-package lsp-python-ms
  ;;   :ensure t
  ;;   :init  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  ;;   :hook ((python-mode . (lambda ()
  ;;                           (require 'lsp-python-ms)
  ;;                           (lsp)
  ;;                           (corfu-mode 1)))
  ;;          ;; (flycheck-mode . (lambda ()
  ;;          ;;                    (flycheck-add-next-checker 'python-mypy)))
  ;;          ))
#+end_src
**** Elpy
:PROPERTIES:
:ID:       c236c336-289a-4133-8bf3-ecb5a66534f5
:END:
#+begin_src emacs-lisp :tangle yes
  ;; Installed through nix
  ;; (use-package elpy * 9
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;   (add-hook 'elpy-mode-hook (lambda ()
  ;;                               (add-hook 'before-save-hook
  ;;                                         'elpy-black-fix-code nil t)))
  ;;   (setq elpy-project-root-finder-functions '(elpy-project-find-git-root elpy-project-find-python-root elpy-project-find-hg-root elpy-project-find-svn-root))
  ;;   (setq elpy-rpc-backend "jedi")
  ;;   (setq python-shell-interpreter "ipython"
  ;;         python-shell-interpreter-args "-i --simple-prompt")

  ;;   (when (load "flycheck" t t)
  ;;     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  ;;     (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;;   (add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;                "jupyter"))
  ;; (add-hook 'elpy-mode-hook (lambda ()
  ;;                             (add-hook 'before-save-hook
  ;;                                       'elpy-black-fix-code nil t)))

#+end_src
**** Black
#+begin_src emacs-lisp :tangle yes
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode))
#+end_src
**** Tree Sitter
#+begin_src emacs-lisp :tangle yes
  (use-package tree-sitter
    :hook
    (((python-mode
       inferior-python-mode) . tree-sitter-mode)
     (python-mode . (lambda ()
                      (add-function :before-until (local 'tree-sitter-hl-face-mapping-function)
                                    (lambda (capture-name)
                                      (pcase capture-name
                                        ("doc" 'font-lock-comment-face))))))))
  (use-package tree-sitter-langs
    :after (tree-sitter)
    :config
    (add-to-list 'tree-sitter-major-mode-language-alist '(jupyter-repl-mode . python))
    (add-to-list 'tree-sitter-major-mode-language-alist '(inferior-python-mode . python))
    (add-to-list 'tree-sitter-major-mode-language-alist '(inferior-python-mode . bash))
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

**** Anaconda
:PROPERTIES:
:ID:       31703afa-434c-4b64-a65b-cd21c992fdd0
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package anaconda-mode
  ;;   :after (sphinx-doc python-docstring)
  ;;   :hook ((python-mode . anaconda-mode)
  ;;          (python-mode . anaconda-eldoc-mode)
  ;;          (python-mode .
  ;;                            (lambda ()
  ;;                              (sphinx-doc-mode t)
  ;;                              (whitespace-mode 1)
  ;;                              (python-docstring-mode 1)))))
  ;; (use-package company-anaconda)
#+END_SRC

**** Docstrings
:PROPERTIES:
:ID:       012deb47-1587-473a-b74c-85a0a322d7ad
:END:
Support for sphinx style docstrings.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python-docstring
    :hook (python-mode . python-docstring-mode))
#+END_SRC

*** Jupyter
:PROPERTIES:
:ID:       db24f115-910d-4f9f-ba13-4dd9855c0b7d
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ansi-color
    :config
    (defun jupyter-ansi-color-apply-on-region (begin end)
      (ansi-color-apply-on-region begin end t)))
  (use-package popup)
  (use-package jupyter
    :config
    (require 'jupyter-python)
    (require 'jupyter-julia)
                                          ;(require 'jupyter-wolfram-language)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (jupyter . t)))
    (setq jupyter-eval-use-overlays t)
    (setq jupyter-eval-short-result-display-function #'popup-tip))

#+end_src

*** YASnippets
:PROPERTIES:
:ID:       7dc43d7d-d857-4947-9f82-56d956bea24b
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-global-mode
    :config (yas-global-mode 1))
  (use-package elixir-yasnippets)
  (use-package yasnippet-snippets)
  (use-package yasnippet-classic-snippets)
                                          ;(use-package ivy-yasnippet)
  ;; (use-package ivy-xref
  ;;   :init (setq xref-show-definitions-function #'ivy-xref-show-defs))
#+END_SRC

*** Auto expanding snippets
Very useful for TeX. Expand automatically.
#+begin_src emacs-lisp :tangle yes
  (setq greek-letters '(";al" "α"
                        ";be" "β"
                        ";ga" "γ"
                        ";de" "δ"
                        ";ep" "ε"
                        ";ze" "ζ"
                        ";et" "η"
                        ";th" "θ"
                        ";io" "ι"
                        ";ka" "κ"
                        ";la" "λ"
                        ";mu" "μ"
                        ";nu" "ν"
                        ";xi" "ξ"
                        ";oi" "ο" ;; omicron
                        ";pi" "π"
                        ";ro" "ρ"
                        ";si" "σ"
                        ";ta" "τ"
                        ";up" "υ"
                        ";ph" "φ"
                        ";ch" "χ"
                        ";ps" "ψ"
                        ";oe" "ω" ;; omega

                        ;; Greek capital letters
                        ";Al" "Α"
                        ";Be" "Β"
                        ";Ga" "Γ"
                        ";De" "Δ"
                        ";Ep" "Ε"
                        ";Ze" "Ζ"
                        ";Et" "Η"
                        ";Th" "Θ"
                        ";Io" "Ι"
                        ";Ka" "Κ"
                        ";La" "Λ"
                        ";Mu" "Μ"
                        ";Nu" "Ν"
                        ";Xi" "Ξ"
                        ";Oi" "Ο" ;; Omicron
                        ";Pi" "Π"
                        ";Ro" "Ρ"
                        ";Si" "Σ"
                        ";Ta" "Τ"
                        ";Up" "Υ"
                        ";Ph" "Φ"
                        ";Ch" "Χ"
                        ";Ps" "Ψ"
                        ";Oe" "Ω" ;; Omega
                        ";int" "∫"
                        ";su" "∑"
                        ";pro" "∏"
                        ";dag" "†"
                        ";tra" "⊺"
                        ";bra" "〈"
                        ";ket" "〉"
                        ";inf" "∞"
                        ";par" "∂"
                        ">="   "≥"

                        )
        greek-latex '(";al" "\\alpha"
                      ";be" "\\beta"
                      ";ga" "\\gamma"
                      ";de" "\\delta"
                      ";ep" "ε"
                      ";ze" "ζ"
                      ";et" "η"
                      ";th" "θ"
                      ";io" "ι"
                      ";ka" "κ"
                      ";la" "λ"
                      ";mu" "μ"
                      ";nu" "ν"
                      ";xi" "ξ"
                      ";oi" "ο" ;; omicron
                      ";pi" "π"
                      ";ro" "ρ"
                      ";si" "σ"
                      ";ta" "τ"
                      ";up" "υ"
                      ";ph" "φ"
                      ";ch" "χ"
                      ";ps" "ψ"
                      ";oe" "ω" ;; omega

                      ;; Greek capital letters
                      ";Al" "Α"
                      ";Be" "Β"
                      ";Ga" "Γ"
                      ";De" "Δ"
                      ";Ep" "Ε"
                      ";Ze" "Ζ"
                      ";Et" "Η"
                      ";Th" "Θ"
                      ";Io" "Ι"
                      ";Ka" "Κ"
                      ";La" "Λ"
                      ";Mu" "Μ"
                      ";Nu" "Ν"
                      ";Xi" "Ξ"
                      ";Oi" "Ο" ;; Omicron
                      ";Pi" "Π"
                      ";Ro" "Ρ"
                      ";Si" "Σ"
                      ";Ta" "Τ"
                      ";Up" "Υ"
                      ";Ph" "Φ"
                      ";Ch" "Χ"
                      ";Ps" "Ψ"
                      ";Oe" "Ω" ;; Omega

                      ))
  (use-package aas
    :hook (LaTeX-mode . aas-activate-for-major-mode)
    :hook (org-mode . aas-activate-for-major-mode)
    :hook (python-mode . aas-activate-for-major-mode)
    :hook (jupyter-repl-mode . (lambda ()
                                 (aas-mode 1)
                                 (aas-activate-keymap 'greek-letters)))
    :hook (rst-mode . (lambda ()
                                 (aas-mode 1)
                                 (aas-activate-keymap 'greek-letters)))
    :hook (minibuffer-setup . (lambda ()
                                (aas-mode 1)
                                (aas-activate-keymap 'greek-letters)))
    :hook (minibuffer-exit . (lambda ()
                               (aas-mode 0)
                               (aas-activate-keymap 'greek-letters)))
    :config
    (apply #'aas-set-snippets 'text-mode greek-letters)
    (apply #'aas-set-snippets 'greek-letters greek-letters)
    (apply #'aas-set-snippets 'python-mode greek-letters)
    (apply #'aas-set-snippets 'jupyter-repl-mode greek-letters)
    (aas-set-snippets 'latex-mode
      ;; set condition!
      :cond #'texmathp                    ; expand only while in math
      "supp" "\\supp"
      "On" "O(n)"
      "O1" "O(1)"
      "Olog" "O(\\log n)"
      "Olon" "O(n \\log n)"
      "/adj" "^†"
      "conj" "^\\ast"
      "/cal" (lambda () (interactive)
               (yas-expand-snippet "\\mathcal{$1}$0"))
      "/dot" (lambda () (interactive)
               (yas-expand-snippet "\\dot{$1}$0"))
      "/ev" (lambda () (interactive)
              (yas-expand-snippet "\\ev{$1}$0"))
      ;; bind to functions!
      "//" (lambda () (interactive)
             (yas-expand-snippet "\\frac{$1}{$2}$0"))
      "dv" (lambda () (interactive)
             (yas-expand-snippet "\\dv{$1}{$2}$0"))
      "Span" (lambda () (interactive)
               (yas-expand-snippet "\\Span($1)$0"))
      "!="    "\\neq"
      "!>"    "\\mapsto"
      "**"    "\\cdot"
      "+-"    "\\pm"
      "-+"    "\\mp"
      "->"    "\\to"
      "..."   "\\dots"
      "<<"    "\\ll"
      "<="    "\\leq"
      "<>"    "\\diamond"
      "=<"    "\\impliedby"
      "=="    "&="
      "=>"    "\\implies"
      ">>"    "\\gg"
      "AA"    "\\forall"
      "EE"    "\\exists"
      "cb"    "^3"
      "iff"   "\\iff"
      "inn"   "\\in"
      "notin" "\\not\\in"
      "sr"    "^2"
      "xx"    "\\times"
      "|->"   "\\mapsto"
      "|="    "\\models"
      "||"    "\\mid"
      "~="    "\\approx"
      "~~"    "\\sim"
      "arccos" "\\arccos"
      "arccot" "\\arccot"
      "arccot" "\\arccot"
      "arccsc" "\\arccsc"
      "arcsec" "\\arcsec"
      "arcsin" "\\arcsin"
      "arctan" "\\arctan"
      "cos"    "\\cos"
      "cot"    "\\cot"
      "csc"    "\\csc"
      "exp"    "\\exp"
      "ln"     "\\ln"
      "log"    "\\log"
      "perp"   "\\perp"
      "sin"    "\\sin"
      "star"   "\\star"
      "gcd"    "\\gcd"
      "min"    "\\min"
      "max"    "\\max"
      ";'"  "\\prime"
      ";."  "\\cdot"
      ";inv" "^{-1}"
      )
    (aas-set-snippets 'latex-mode
                      ;; set condition!
                      :cond #'texmathp  ; expand only while in math
                      "supp" "\\supp"
                      "On" "O(n)"
                      "O1" "O(1)"
                      "Olog" "O(\\log n)"
                      "Olon" "O(n \\log n)"
                      "dag" "^\\dag"
                      "conj" "^\\ast"
                      "/cal" (lambda () (interactive)
                              (yas-expand-snippet "\\mathcal{$1}$0"))
                      "/dot" (lambda () (interactive)
                              (yas-expand-snippet "\\dot{$1}$0"))
                      "/ev" (lambda () (interactive)
                             (yas-expand-snippet "\\ev{$1}$0"))
                      ;; bind to functions!
                      "//" (lambda () (interactive)
                             (yas-expand-snippet "\\frac{$1}{$2}$0"))
                      "dv" (lambda () (interactive)
                             (yas-expand-snippet "\\dv{$1}{$2}$0"))
                      "Span" (lambda () (interactive)
                               (yas-expand-snippet "\\Span($1)$0"))
                      "!="    "\\neq"
                      "!>"    "\\mapsto"
                      "**"    "\\cdot"
                      "+-"    "\\pm"
                      "-+"    "\\mp"
                      "->"    "\\to"
                      "..."   "\\dots"
                      "<<"    "\\ll"
                      "<="    "\\leq"
                      "<>"    "\\diamond"
                      "=<"    "\\impliedby"
                      "=="    "&="
                      "=>"    "\\implies"
                      ">="    "\\geq"
                      ">>"    "\\gg"
                      "AA"    "\\forall"
                      "EE"    "\\exists"
                      "cb"    "^3"
                      "iff"   "\\iff"
                      "inn"   "\\in"
                      "notin" "\\not\\in"
                      "sr"    "^2"
                      "xx"    "\\times"
                      "|->"   "\\mapsto"
                      "|="    "\\models"
                      "||"    "\\mid"
                      "~="    "\\approx"
                      "~~"    "\\sim"
                      "arccos" "\\arccos"
                      "arccot" "\\arccot"
                      "arccot" "\\arccot"
                      "arccsc" "\\arccsc"
                      "arcsec" "\\arcsec"
                      "arcsin" "\\arcsin"
                      "arctan" "\\arctan"
                      "cos"    "\\cos"
                      "cot"    "\\cot"
                      "csc"    "\\csc"
                      "exp"    "\\exp"
                      "ln"     "\\ln"
                      "log"    "\\log"
                      "perp"   "\\perp"
                      "sin"    "\\sin"
                      "star"   "\\star"
                      "gcd"    "\\gcd"
                      "min"    "\\min"
                      "max"    "\\max"
                      ";'"  "\\prime"
                      ";."  "\\cdot"
                      ";inv" "^{-1}"
                      ))
#+end_src

*** Fish
:PROPERTIES:
:ID:       8f702ee5-59b7-4056-b76e-f9cd13414657
:END:
Fish shell script mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fish-mode)
#+END_SRC
*** Arch PKGBUILD
:PROPERTIES:
:ID:       76851fc8-b7eb-458a-8d42-c60c31c429bc
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pkgbuild-mode)
#+END_SRC
*** C++
:PROPERTIES:
:ID:       5eb6b743-18bd-4c18-ba40-a5372793e570
:END:
Set up ~lsp~, ~ccls~.
#+begin_src emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))
  ;; (use-package ccls
  ;;   :ensure t
  ;;   :config
  ;;   (setq ccls-executable "ccls")
  ;;   (setq lsp-prefer-flymake nil)
  ;;   (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  ;;   (setq ccls-sem-highlight-method 'overlay)
  ;;   ;; (ccls-use-default-rainbow-sem-highlight)
  ;;   (set-buffer-multibyte nil)            ;TODO: Better fix!
  ;;   :hook ((c-mode c++-mode objc-mode) .
  ;;          (lambda () (require 'ccls) (lsp))))
#+end_src

Automatically insert Include-Guards.
#+begin_src emacs-lisp :tangle yes
  ;; autoinsert C/C++ header
    (define-auto-insert
      (cons "\\.\\([Hh]\\|hh\\|hpp\\)\\'" "My C / C++ header")
      '(nil
        (let* ((noext (substring buffer-file-name 0 (match-beginning 0)))
                   (nopath (file-name-nondirectory noext))
                   (ident (concat (upcase nopath) "_H")))
          (concat "#ifndef " ident "\n"
                          "#define " ident  " 1\n\n\n"
                          "\n\n#endif // " ident "\n"))
        (make-string 70 ?/) "\n"
        "// $Log:$\n"
        "//\n"))

    ;; auto insert C/C++
    (define-auto-insert
      (cons "\\.\\([Cc]\\|cc\\|cpp\\)\\'" "My C++ implementation")
      '(nil
        (let* ((noext (substring buffer-file-name 0 (match-beginning 0)))
                   (nopath (file-name-nondirectory noext))
                   (ident (concat nopath ".h")))
          (if (file-exists-p ident)
                  (concat "#include \"" ident "\"\n")))
        (make-string 70 ?/) "\n"
        "// $Log:$\n"
        "//\n"))
#+end_src

Clang Format.
#+begin_src emacs-lisp :tangle yes
  (use-package clang-format+
    :hook (c-mode-common . clang-format+-mode))
#+end_src

Cmake support.
#+begin_src emacs-lisp :tangle yes
  (use-package cmake-mode)
#+end_src

Use 4 spaces for indenting.
#+begin_src emacs-lisp :tangle yes
  (setq-default c-basic-offset 4)
#+end_src

*** YAML
:PROPERTIES:
:ID:       6386c709-34bd-42ce-97a3-985bfae11ceb
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
*** Docker
:PROPERTIES:
:ID:       08c8c436-b465-4659-86a8-d23a8b22ddfe
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode)
#+end_src
*** Regex
:PROPERTIES:
:ID:       23d2c04f-d35c-444e-888c-4bb68328bdcc
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package regex-tool)
#+end_src
*** Meson
:PROPERTIES:
:ID:       b62041da-b43c-4f2a-b5c1-7848205c4897
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package meson-mode)
#+end_src
*** Lua
:PROPERTIES:
:ID:       1e6a36c0-cfdb-4fe9-9c1a-52ecea13b06e
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode)
#+end_src
*** Nix
:PROPERTIES:
:ID:       465f550d-9380-4ce2-a3ba-98c2529acb5b
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package nix-mode)
#+end_src
*** Julia
:PROPERTIES:
:ID:       c06a05a4-ce4f-400a-a6a3-7bffbbcfa792
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package julia-repl
    :config
    (julia-repl-set-terminal-backend 'vterm)
    (add-hook 'julia-mode-hook 'julia-repl-mode)
    (setq julia-repl-switches "-J /home/hiro/.julia/image/sys_repl.so"))
  (use-package eglot-jl
    :ensure t
    :defer  t
    :config
    (setq eglot-jl-julia-flags  '("-J" "/home/hiro/.julia/image/sys_ls.so")))
  (use-package project
    :demand t)
  (use-package eglot)
  (use-package julia-mode
    :ensure t
    :interpreter ("julia" . julia-mode)
    :config
    (add-hook 'julia-mode-hook 'eglot-jl-init)
    (add-hook 'julia-mode-hook 'eglot-ensure))
#+end_src

**** Highlighting
:PROPERTIES:
:ID:       3bd869ed-0168-4722-a3b4-49745567dd40
:END:
Some extra highlighting for assignments is nice.
Stolen from [[https://www.reddit.com/r/emacs/comments/cbvwlp/juliamode_syntax_highlight/][reddit]] or python-mode by proxy.
#+begin_src emacs-lisp :tangle yes
  (setq my-julia-assign-ops
        `(or "=" "+=" "-=" "*=" "/=" "//=" "%=" "**="
             ">>=" "<<=" "&=" "^=" "|="))
  (font-lock-add-keywords
   'julia-mode
   `((,(lambda (limit)
         (let (res
               (re (rx-to-string `(: (group (+ (any word ?. ?_)))
                                     (? ?\[ (+ (not (any  ?\]))) ?\])
                                     (* space)
                                     ,my-julia-assign-ops))))
           (while (and (setq res (re-search-forward re limit t))
                       (or (nth 1 (syntax-ppss))
                           (equal (char-after (point)) ?=))))
           res))
      (1 font-lock-variable-name-face nil nil))
     (,(lambda (limit)
         (let (res
               (re (rx-to-string `(: (group (+ (any word ?. ?_)))
                                     (* space)
                                     (* ?,
                                        (* space)
                                        (+ (any word ?. ?_))
                                        (* space))
                                     ?,
                                     (* space)
                                     (+ (any word ?. ?_))
                                     (* space)
                                     ,my-julia-assign-ops))))
           (while (and (setq res (re-search-forward re limit t))
                       (goto-char (match-end 1))
                       (nth 1 (syntax-ppss))))
           res))
      (1 font-lock-variable-name-face nil nil))))
#+end_src

#+RESULTS:

**** Formatting
:PROPERTIES:
:ID:       83deb4c2-9191-45c8-afd7-d59feb3c8dae
:END:
Hooking into aggressive indent.
#+begin_src emacs-lisp :tangle yes
  (use-package julia-formatter
    :straight (julia-formatter
               :type git
               :repo "https://codeberg.org/FelipeLema/julia-formatter.el.git"
               :pre-build ("julia" "--project=." "-e " "\"using Pkg; Pkg.resolve();\"")
               :files ("*.el" "*.toml" "*.jl"))
    :hook
    (julia-mode . (lambda ()
                    (add-hook 'before-save-hook
                              (lambda ()
                                (julia-formatter-format-region
                                 (point-min)
                                 (point-max)))
                              nil
                              t))))
#+end_src
*** Rust
:PROPERTIES:
:ID:       784b23ee-9e23-4562-b485-27851f865a3d
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package rust-mode
    :hook (rust-mode . lsp))

  ;; Add keybindings for interacting with Cargo
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src
*** QML
:PROPERTIES:
:ID:       b49db1fb-a87e-4bca-ac22-fde79fd4d80a
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package qml-mode)
#+end_src
*** Arduino
:PROPERTIES:
:ID:       ae05b648-a396-4d16-8fbf-3f2609ceb763
:END:
#+begin_src emacs-lisp :tangle yes
    (use-package arduino-mode)
#+end_src
*** Languagetool LSP
#+begin_src emacs-lisp :tangle yes
  ;; (use-package lsp-ltex
  ;;   :after (lsp-mode)
  ;;   :hook (latex-mode . (lambda ()
  ;;                         (require 'lsp-ltex)
  ;;                         (lsp)))
  ;;   :config (setq lsp-ltex-language "en-GB"))
#+end_src
** Applications
*** Ank
:PROPERTIES:
:ID:       f8d492d4-6bbc-4f0c-888e-0b12837a661f
:END:
Stolen from https://yiufung.net/post/anki-org/.
#+begin_src emacs-lisp :tangle yes
  (use-package anki-editor
    :after org
    :bind (:map org-mode-map
                ("<f12>" . anki-editor-cloze-region-auto-incr)
                ("<f11>" . anki-editor-cloze-region-dont-incr)
                ("<f10>" . anki-editor-reset-cloze-number)
                ("<f9>"  . anki-editor-push-tree))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config
    (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
          anki-editor-org-tags-as-anki-tags t)

    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes)
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number))
#+end_src
*** MU4E
:PROPERTIES:
:ID:       19002b1b-7dab-4239-ba33-83ab204df86d
:END:
#+begin_src emacs-lisp :tangle yes
  ;; (use-package mu4e
  ;;   :config
  ;;   (setq mu4e-view-show-images t)
  ;;   (when (fboundp 'imagemagick-register-types)
  ;;     (imagemagick-register-types))
  ;;   (setq mu4e-compose-in-new-frame t)
  ;;   (setq mu4e-sent-messages-behavior 'delete)
  ;;   (add-hook 'mu4e-headers-mode-hook
  ;;             (defun my/mu4e-change-headers ()
  ;;               (interactive)
  ;;               (setq mu4e-headers-fields
  ;;                     `((:human-date . 25) ;; alternatively, use :date
  ;;                       (:flags . 6)
  ;;                       (:from . 22)
  ;;                       (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
  ;;                       (:size . 7)))))
  ;;   (add-hook 'mu4e-compose-mode-hook
  ;;             (defun my-do-compose-stuff ()
  ;;               "My settings for message composition."
  ;;               (visual-line-mode)
  ;;               (org-mu4e-compose-org-mode)
  ;;               (use-hard-newlines -1)
  ;;               (flyspell-mode)))

  ;;   (setq mu4e-contexts
  ;;         `(
  ;;           ,(make-mu4e-context
  ;;             :name "Protagon"
  ;;             :match-func (lambda (msg) (when msg
  ;;                                         (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
  ;;             :vars '(
  ;;                     (mu4e-trash-folder . "/Gmail/[Gmail].Trash")
  ;;                     (mu4e-refile-folder . "/Gmail/[Gmail].Archive")
  ;;                     )))))
#+end_src
*** Bibtex Frontend
#+begin_src emacs-lisp :tangle yes
  (use-package citar
    :after (org-ref)
    :straight (:host github :repo "bdarcus/citar")
    :bind (;("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :config
    (setq citar-bibliography (car bibtex-completion-bibliography))
    (setq citar-library-paths org-ref-pdf-directory))

  (use-package citar-org
    :straight (:host github :repo "bdarcus/citar")
    :no-require
    ;:bind                                 ; optional
    ;(:map org-mode-map
          ;("C-c b" . #'org-cite-insert))  ; Also bound to C-c C-x C-@
    :config
    (setq org-cite-global-bibliography bibtex-completion-bibliography)
    (setq org-cite-insert-processor 'citar)
    (setq org-cite-follow-processor 'citar)
    (setq org-cite-activate-processor 'citar))
#+end_src
** Custom Scripts
*** Close all Buffers
:PROPERTIES:
:ID:       84c7e39f-d35d-49d8-bb66-acb8df2fdeb6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun close-all-buffers ()
    "Closes all buffers."
    (interactive)
    (mapc 'kill-buffer
          (buffer-list)))
#+END_SRC
*** Rename Buffer and File
:PROPERTIES:
:ID:       53dd7d81-f90e-4088-9326-0d5d8ebb69c6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
#+END_SRC

*** Create Common Use-Package declaration
:PROPERTIES:
:ID:       58d9179a-8ef6-4713-a216-2d8549795bad
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defmacro my-create-up-common (name &rest common-args)
    "Creates a use-package declaration that automatically adds
    predefined configuration."
    (declare (indent 1))
    `(defmacro ,name (package &rest args)
       (declare (indent 1))
       `(use-package ,package
          ,@args
          ,@',common-args)))
#+END_SRC
*** Insert a new exercise into an org file
:PROPERTIES:
:ID:       6ac3df76-84eb-4f86-a010-59a3001db150
:END:
#+begin_src emacs-lisp :tangle yes
  (require 'org)
  (require 'org-element)
  (require 'cl-lib)
  (defun insert-uebung (file org-path)
    (interactive
     (list (read-file-name "Select Uebung: " "~/Downloads") (org-get-outline-path t)))
    (when (and
           (eq (length org-path) 2)
           (string= (nth 1 org-path) "Uebungen"))
      (save-match-data
        (let* ((subject (cl-first (org-get-outline-path)))
               (last-heading
                (cl-first (last (org-map-entries
                              (lambda ()
                                (nth 4 (org-heading-components)))
                              nil 'tree))))
               (last-ex-number
                (progn
                  (string-match ".*?\\([0-9]+\\)\\..*" last-heading)
                  (string-to-number (match-string 1 last-heading))))
               (ueb-dir (format "%s%s/uebungen/%d/"
                                (file-name-directory (buffer-file-name))
                                subject
                                (1+ last-ex-number)))
               (new-file (format "%s%s" ueb-dir (file-name-nondirectory file)))
               (solution-file (format "%s/lsg.xoj" ueb-dir))
               (template-file (format "%s/lsg.xoj"
                                      (file-name-directory (buffer-file-name))))
               (template-bg-file (format "%s/lsg.xoj.bg_2.png"
                                         (file-name-directory (buffer-file-name)))))
          (make-directory ueb-dir t)
          (copy-file file new-file t)
          (org-insert-heading-after-current)
          (insert (format "TODO %d. Uebung" (1+ last-ex-number)))
          (org-demote)
          (forward-line)
          (insert (format "- [[%s][Blatt]]\n" new-file))
          (copy-file template-file solution-file nil)
          (copy-file template-bg-file ueb-dir nil)
          (insert (format "- [[%s][meine loesung]]\n\n" solution-file))
          (forward-line -4)
          (org-set-tags "EXERCISE")
          (call-interactively 'org-deadline)))))

#+end_src

#+RESULTS:
: insert-uebung
*** Fun Hack to make C++ look like python
:PROPERTIES:
:ID:       6cba49bd-d365-46e9-8d53-62fe91ece43b
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package ov)
  (defun pycpp-sugar ()
    (interactive)
    (ov-clear 'category 'pycpp)
    (ov-set (ov-regexp "[[:blank:]]*\n?[[:blank:]]*{[[:blank:]]*\n") 'display ":\n" 'category 'pycpp
            'modification-hooks '(my-ov-evaporate-matching) 'evaporate 't
            'insert-in-front-hooks '(my-ov-evaporate-matching-end)
            'insert-behind-hooks '(my-ov-evaporate-matching-end))
    (ov-set (ov-regexp "^[[:blank:]]*}[[:blank:];]*\n") 'display "\n" 'category 'pycpp 'evaporate 't
            'modification-hooks '(my-ov-evaporate-matching-end)
            'insert-in-front-hooks '(my-ov-evaporate-matching-end)
            'insert-behind-hooks '(my-ov-evaporate-matching-end)))

  (defun pycpp-unsugar ()
    (interactive)
    (ov-clear 'category 'pycpp))

  (defun my-ov-evaporate-matching (_ov _after _beg _end &optional _length)
    (save-excursion
      (goto-char (ov-beg _ov))
      (re-search-forward "{")
      (backward-char)
      (forward-sexp)
      (backward-char)
      (ov-clear 'category 'pycpp (point) (+ (point) 1))
      (goto-char _beg)
      (insert (buffer-substring _beg _end))
      (ov-clear (ov-beg _ov) (ov-end _ov))))

  (defun my-ov-evaporate-matching-end (_ov _after _beg _end &optional _length)
    (save-excursion
      (goto-char (ov-end _ov))
      (re-search-backward "}")
      (forward-char)
      (backward-sexp)
      (ov-clear 'category 'pycpp (point) (+ (point) 1))
      (goto-char _beg)
      (insert (buffer-substring _beg _end))
      (ov-clear (ov-beg _ov) (ov-end _ov))))

  (defun pycpp--newline ()
    (interactive)
    (newline)
    (pycpp-sugar))

  (define-minor-mode pycpp-mode
    "Toggles the pycpp mode."
    nil                                ; Initial value, nil for disabled
    :global nil
    :group 'cpp
    :lighter " pycpp"
    :keymap
    (list (cons (kbd "RET") #'pycpp--newline))

    (if pycpp-mode
        (progn
          (message "pycpp mode enabled")
          (pycpp-sugar))
      (pycpp-unsugar)))
#+end_src
